{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rahulsharma/Desktop/Project/frontend/src/components/InviteFriends.js\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport BottomTabNavigator from \"./job_seeker/BottomTabNavigator\";\nimport ContactOverlay from \"./job_seeker/ContactOverlay\";\nimport SettingsOverlay from \"./job_seeker/SettingsOverlay\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar InviteFriends = function InviteFriends(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      settingModalVisible = _useState2[0],\n      setSettingModalVisible = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userData = _useState4[0],\n      setUserData = _useState4[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    setUserData(props.navigation.state.params);\n    return function () {\n      console.log(\"Cleanup in setting overlay.\");\n    };\n  }, []);\n\n  var onShare = function onShare(_ref) {\n    var code, result;\n    return _regeneratorRuntime.async(function onShare$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            code = _ref.code;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Share.share({\n              message: \"Use this code: \" + code + \" to register with Incareof.\"\n            }));\n\n          case 4:\n            result = _context.sent;\n\n            if (result.action === Share.sharedAction) {\n              if (result.activityType) {\n                console.log(\"shared with ==============> \", result.activityType);\n              } else {\n                console.log(\"else shared ==============> \", result);\n              }\n            } else if (result.action === Share.dismissedAction) {\n              console.log(\"share cancelled.\");\n            }\n\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            alert(_context.t0.message);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.inviteFriendScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.inviteCodeContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.codeText,\n    onPress: function onPress() {\n      return onShare({\n        code: \"EX434Z54\"\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, \"EX434Z54\"))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, React.createElement(BottomTabNavigator, {\n    userData: userData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  })), React.createElement(SettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    backgroundColor: \"#dddddd\",\n    height: 300,\n    width: width,\n    elevation: 6\n  },\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  inviteFriendScreen: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  inviteCodeContainer: {\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1\n  },\n  codeText: {\n    borderStyle: \"dashed\",\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: \"#9E9E9E\",\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    backgroundColor: \"#8fbc8f\",\n    fontSize: 20,\n    fontWeight: \"700\"\n  }\n});\nexport default InviteFriends;","map":{"version":3,"sources":["/Users/rahulsharma/Desktop/Project/frontend/src/components/InviteFriends.js"],"names":["React","useState","useEffect","BottomTabNavigator","ContactOverlay","SettingsOverlay","Dimensions","get","width","height","InviteFriends","props","settingModalVisible","setSettingModalVisible","userData","setUserData","switchToScreen","screen","params","navigation","navigate","state","console","log","onShare","code","Share","share","message","result","action","sharedAction","activityType","dismissedAction","alert","styles","container","inviteFriendScreen","inviteCodeContainer","codeText","bottomNavigation","StyleSheet","create","overlay","flex","position","left","top","backgroundColor","elevation","flexDirection","shadowColor","shadowOffset","shadowOpacity","shadowRadius","justifyContent","alignItems","borderStyle","borderRadius","borderWidth","borderColor","paddingHorizontal","paddingVertical","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    StyleSheet,\n    Text,\n    View,\n    Share,\n    Dimensions,\n    Image,\n    TouchableHighlight,\n    TouchableOpacity,\n} from \"react-native\";\nimport BottomTabNavigator from \"./job_seeker/BottomTabNavigator\";\nimport ContactOverlay from \"./job_seeker/ContactOverlay\";\nimport SettingsOverlay from \"./job_seeker/SettingsOverlay\";\n\n// We can use this to make the overlay fill the entire width\nconst { width, height } = Dimensions.get(\"window\");\n\nconst InviteFriends = (props) => {\n    const [settingModalVisible, setSettingModalVisible] = useState(false);\n    const [userData, setUserData] = useState({});\n\n    function switchToScreen(screen, params) {\n        props.navigation.navigate(screen, params);\n    }\n\n    useEffect(() => {\n        setUserData(props.navigation.state.params);\n\n        return () => {\n            console.log(\"Cleanup in setting overlay.\");\n        };\n    }, []);\n\n    const onShare = async ({ code }) => {\n        try {\n            const result = await Share.share({\n                message: `Use this code: ${code} to register with Incareof.`,\n            });\n            if (result.action === Share.sharedAction) {\n                if (result.activityType) {\n                    // shared with activity type of result.activityType\n                    console.log(\n                        \"shared with ==============> \",\n                        result.activityType\n                    );\n                } else {\n                    // shared\n                    console.log(\"else shared ==============> \", result);\n                }\n            } else if (result.action === Share.dismissedAction) {\n                // dismissed\n                console.log(\"share cancelled.\");\n            }\n        } catch (error) {\n            alert(error.message);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.inviteFriendScreen}>\n                <View style={styles.inviteCodeContainer}>\n                    <Text\n                        style={styles.codeText}\n                        onPress={() => onShare({ code: \"EX434Z54\" })}\n                    >\n                        EX434Z54\n                    </Text>\n                </View>\n            </View>\n            <View style={styles.bottomNavigation}>\n                <BottomTabNavigator\n                    userData={userData}\n                    setSettingModalVisible={setSettingModalVisible}\n                    switchToScreen={switchToScreen}\n                />\n            </View>\n            <SettingsOverlay\n                switchToScreen={switchToScreen}\n                settingModalVisible={settingModalVisible}\n                setSettingModalVisible={setSettingModalVisible}\n            />\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    overlay: {\n        flex: 1,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        backgroundColor: \"#dddddd\",\n        height: 300,\n        width,\n        elevation: 6,\n    },\n    container: {\n        flexDirection: \"column\",\n        flex: 1,\n        width: null,\n        height: null,\n    },\n    inviteFriendScreen: {\n        flex: 9.2,\n    },\n    bottomNavigation: {\n        flex: 0.8,\n        backgroundColor: \"#dddddd\",\n        shadowColor: \"#dddddd\",\n        shadowOffset: {\n            width: 0,\n            height: 4,\n        },\n        shadowOpacity: 0.3,\n        shadowRadius: 4.65,\n        elevation: 8,\n    },\n    inviteCodeContainer: {\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flex: 1,\n    },\n    codeText: {\n        borderStyle: \"dashed\",\n        borderRadius: 10,\n        borderWidth: 1,\n        borderColor: \"#9E9E9E\",\n        paddingHorizontal: 20,\n        paddingVertical: 10,\n        backgroundColor: \"#8fbc8f\",\n        fontSize: 20,\n        fontWeight: \"700\",\n    },\n});\n\nexport default InviteFriends;\n"]},"metadata":{},"sourceType":"module"}