{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rahulsharma/Desktop/Project/frontend/src/components/employer/EmployerScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Toast from \"react-native-root-toast\";\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\nimport UserContactOverlay from \"./UserContactOverlay\";\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { baseUrl } from \"../../utils/constants\";\nimport JobCard from \"./JobCard\";\n\nvar EmployerScreen = function EmployerScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterVisiblity = _useState4[0],\n      setFilterVisibility = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      settingModalVisible = _useState6[0],\n      setSettingModalVisible = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loginData = _useState8[0],\n      setLoginData = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      employerData = _useState10[0],\n      setEmployerData = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      success = _useState12[0],\n      setSuccess = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      jobsData = _useState14[0],\n      setJobsData = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      jobs = _useState16[0],\n      setJobs = _useState16[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    try {\n      AsyncStorage.getItem(\"employerLoginData\").then(function (data) {\n        var _JSON$parse = JSON.parse(data),\n            login = _JSON$parse.login,\n            user = _JSON$parse.user;\n\n        setLoginData(login);\n        setEmployerData(user);\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }, []);\n  useEffect(function () {\n    if (employerData.id) {\n      var api_url = baseUrl + (\"api/employer/job-applicants/\" + employerData.id);\n      fetch(api_url, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          setJobsData(response.result);\n          setJobs(response.result);\n        } else {\n          throw new Error(response);\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n\n    return function () {};\n  }, [employerData]);\n\n  function handleSelectedService(serviceMap) {\n    var selectedService = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(serviceMap.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n      if (serviceMap.get(key)) selectedService.push(key);\n    }\n\n    if (selectedService.length > 0) {\n      var _jobs = jobsData.filter(function (job) {\n        return selectedService.includes(job.job_service_id);\n      });\n\n      setJobs(_jobs);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByText(text) {\n    if (text.length >= 3) {\n      var _jobs2 = jobsData.filter(function (job) {\n        return job.job_title.includes(text);\n      });\n\n      setJobs(_jobs2);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByWager(wager) {\n    var jobs = jobsData.filter(function (job) {\n      return parseInt(job.wager_offered) >= wager;\n    });\n    setJobs(jobs);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.innerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, React.createElement(EmployerSearchFilter, {\n    handleFilterByText: handleFilterByText,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, jobs.length > 0 ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: false,\n    data: jobs,\n    keyExtractor: function keyExtractor(job) {\n      return job.id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(JobCard, {\n        job: item,\n        setModalVisible: setModalVisible,\n        switchToScreen: switchToScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 37\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  }) : React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }\n  }, \"Job Post not found.\")))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, React.createElement(EmployerBottomNavigator, {\n    employerLoginData: loginData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })), React.createElement(Toast, {\n    visible: success !== null && !success,\n    duration: Toast.durations.SHORT,\n    position: Toast.positions.BOTTOM,\n    backgroundColor: \"red\",\n    shadowColor: \"#dddddd\",\n    shadow: true,\n    animation: false,\n    hideOnPress: true,\n    onHidden: function onHidden() {\n      return setSuccess(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Something went wrong.\"), React.createElement(EmployerFilterOverlay, {\n    jobs: jobs,\n    handleFilterByText: handleFilterByText,\n    handleFilterByWager: handleFilterByWager,\n    handleSelectedService: handleSelectedService,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }), React.createElement(UserContactOverlay, {\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }), React.createElement(EmployerSettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }));\n};\n\nEmployerScreen[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Posted Jobs\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  innerContainer: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default EmployerScreen;","map":{"version":3,"sources":["/Users/rahulsharma/Desktop/Project/frontend/src/components/employer/EmployerScreen.js"],"names":["React","useState","useEffect","Toast","EmployerSearchFilter","EmployerBottomNavigator","EmployerFilterOverlay","UserContactOverlay","EmployerSettingsOverlay","AsyncStorage","baseUrl","JobCard","EmployerScreen","props","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","loginData","setLoginData","employerData","setEmployerData","success","setSuccess","jobsData","setJobsData","jobs","setJobs","switchToScreen","screen","params","navigation","navigate","getItem","then","data","JSON","parse","login","user","error","console","log","message","id","api_url","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","result","Error","catch","err","handleSelectedService","serviceMap","selectedService","keys","key","get","push","length","filter","job","includes","job_service_id","handleFilterByText","text","job_title","handleFilterByWager","wager","parseInt","wager_offered","styles","container","innerContainer","flex","toString","item","textAlign","bottomNavigation","durations","SHORT","positions","BOTTOM","screenProps","title","StyleSheet","create","flexDirection","width","height","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View, SafeAreaView, FlatList } from \"react-native\";\nimport Toast from \"react-native-root-toast\";\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\nimport UserContactOverlay from \"./UserContactOverlay\";\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { baseUrl } from \"../../utils/constants\";\nimport JobCard from \"./JobCard\";\n\nconst EmployerScreen = (props) => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const [filterVisiblity, setFilterVisibility] = useState(false);\n    const [settingModalVisible, setSettingModalVisible] = useState(false);\n    const [loginData, setLoginData] = useState({});\n    const [employerData, setEmployerData] = useState({});\n    const [success, setSuccess] = useState(null);\n    const [jobsData, setJobsData] = useState([]);\n    const [jobs, setJobs] = useState([]);\n\n    function switchToScreen(screen, params) {\n        props.navigation.navigate(screen, params);\n    }\n\n    useEffect(() => {\n        try {\n            AsyncStorage.getItem(\"employerLoginData\").then((data) => {\n                const { login, user } = JSON.parse(data);\n                setLoginData(login);\n                setEmployerData(user);\n            });\n        } catch (error) {\n            // Error retrieving data\n            console.log(error.message);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (employerData.id) {\n            const api_url =\n                baseUrl + `api/employer/job-applicants/${employerData.id}`;\n            fetch(api_url, {\n                method: \"GET\",\n                mode: \"cors\", // no-cors, *cors, same-origin\n                cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: \"same-origin\", // include, *same-origin, omit\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: \"follow\", // manual, *follow, error\n                referrerPolicy: \"no-referrer\",\n            })\n                .then((response) => response.json())\n                .then((response) => {\n                    if (response.success) {\n                        // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\n                        setJobsData(response.result);\n                        setJobs(response.result);\n                    } else {\n                        throw new Error(response);\n                    }\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        }\n\n        return () => { };\n    }, [employerData]);\n\n    function handleSelectedService(serviceMap) {\n        const selectedService = [];\n        for (var key of serviceMap.keys()) {\n            if (serviceMap.get(key)) selectedService.push(key);\n        }\n        if (selectedService.length > 0) {\n            const jobs = jobsData.filter((job) =>\n                selectedService.includes(job.job_service_id)\n            );\n            setJobs(jobs);\n        } else {\n            setJobs(jobsData);\n        }\n    }\n\n    function handleFilterByText(text) {\n        if (text.length >= 3) {\n            const jobs = jobsData.filter((job) => job.job_title.includes(text));\n            setJobs(jobs);\n        } else {\n            setJobs(jobsData);\n        }\n    }\n\n    function handleFilterByWager(wager) {\n        const jobs = jobsData.filter(\n            (job) => parseInt(job.wager_offered) >= wager\n        );\n        setJobs(jobs);\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.innerContainer}>\n                <EmployerSearchFilter\n                    handleFilterByText={handleFilterByText}\n                    filterVisiblity={filterVisiblity}\n                    setFilterVisibility={setFilterVisibility}\n                />\n                <SafeAreaView style={{ flex: 1 }}>\n                    {jobs.length > 0 ? (\n                        <FlatList\n                            showsVerticalScrollIndicator={false}\n                            data={jobs}\n                            keyExtractor={(job) => job.id.toString()}\n                            renderItem={({ item }) => {\n                                return (\n                                    <JobCard\n                                        job={item}\n                                        setModalVisible={setModalVisible}\n                                        switchToScreen={switchToScreen}\n                                    />\n                                );\n                            }}\n                        />\n                    ) : (\n                            <View style={styles.container}>\n                                <Text style={{ textAlign: \"center\" }}>\n                                    Job Post not found.\n                            </Text>\n                            </View>\n                        )}\n                </SafeAreaView>\n            </View>\n            <View style={styles.bottomNavigation}>\n                <EmployerBottomNavigator\n                    employerLoginData={loginData}\n                    setSettingModalVisible={setSettingModalVisible}\n                    switchToScreen={switchToScreen}\n                />\n            </View>\n            <Toast\n                visible={success !== null && !success}\n                duration={Toast.durations.SHORT}\n                position={Toast.positions.BOTTOM}\n                backgroundColor=\"red\"\n                shadowColor=\"#dddddd\"\n                shadow={true}\n                animation={false}\n                hideOnPress={true}\n                onHidden={() => setSuccess(null)}\n            >\n                Something went wrong.\n            </Toast>\n            <EmployerFilterOverlay\n                jobs={jobs}\n                handleFilterByText={handleFilterByText}\n                handleFilterByWager={handleFilterByWager}\n                handleSelectedService={handleSelectedService}\n                filterVisiblity={filterVisiblity}\n                setFilterVisibility={setFilterVisibility}\n            />\n            <UserContactOverlay\n                modalVisible={modalVisible}\n                setModalVisible={setModalVisible}\n            />\n            <EmployerSettingsOverlay\n                switchToScreen={switchToScreen}\n                settingModalVisible={settingModalVisible}\n                setSettingModalVisible={setSettingModalVisible}\n            />\n        </View>\n    );\n};\n\nEmployerScreen[\"navigationOptions\"] = (screenProps) => ({\n    title: \"Posted Jobs\",\n});\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: \"column\",\n        flex: 1,\n        width: null,\n        height: null,\n    },\n    innerContainer: {\n        flex: 9.2,\n    },\n    bottomNavigation: {\n        flex: 0.8,\n        backgroundColor: \"#dddddd\",\n        shadowColor: \"#dddddd\",\n        shadowOffset: {\n            width: 0,\n            height: 4,\n        },\n        shadowOpacity: 0.3,\n        shadowRadius: 4.65,\n        elevation: 8,\n    },\n    loginText: {\n        color: \"black\",\n        fontSize: 30,\n        marginTop: 20,\n        marginLeft: 100,\n    },\n    nextBtnText: {\n        color: \"black\",\n        fontSize: 20,\n    },\n    loginBtn: {\n        width: \"20%\",\n        backgroundColor: \"#fb5b5a\",\n        borderRadius: 25,\n        height: 50,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: 550,\n        marginBottom: 100,\n        marginLeft: 300,\n    },\n});\n\nexport default EmployerScreen;\n"]},"metadata":{},"sourceType":"module"}