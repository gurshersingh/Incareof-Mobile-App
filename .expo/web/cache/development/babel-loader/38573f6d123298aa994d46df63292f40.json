{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\StarredJobs.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport BottomTabNavigator from \"./job_seeker/BottomTabNavigator\";\nimport SearchFilterBar from \"./job_seeker/SearchFilterBar\";\nimport JobListing from \"./job_seeker/JobListing\";\nimport ContactOverlay from \"./job_seeker/ContactOverlay\";\nimport SettingsOverlay from \"./job_seeker/SettingsOverlay\";\nimport FilterOverlay from \"./job_seeker/FilterOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport _ from \"lodash\";\nimport { baseUrl } from \"../utils/constants\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar StarredJobs = function StarredJobs(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterVisiblity = _useState4[0],\n      setFilterVisibility = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      settingModalVisible = _useState6[0],\n      setSettingModalVisible = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      jobPost = _useState8[0],\n      setJobPost = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      jobs = _useState10[0],\n      setJobs = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userData = _useState12[0],\n      setUserData = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      jobSeekerData = _useState14[0],\n      setJobSeekerData = _useState14[1];\n\n  var _useState15 = useState({}),\n      _useState16 = _slicedToArray(_useState15, 2),\n      employerRecord = _useState16[0],\n      setEmployerRecord = _useState16[1];\n\n  useEffect(function () {\n    if (_.isEmpty(jobSeekerData)) {\n      try {\n        AsyncStorage.getItem(\"jobSeekerLoginData\").then(function (data) {\n          var _JSON$parse = JSON.parse(data),\n              user = _JSON$parse.user,\n              login = _JSON$parse.login;\n\n          setJobSeekerData(user);\n        });\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n\n    return function () {};\n  }, []);\n  useEffect(function () {\n    if (jobSeekerData.id) {\n      console.log(baseUrl + (\"api/job-seeker/starred-job/list/\" + jobSeekerData.id));\n      fetch(baseUrl + (\"api/job-seeker/starred-job/list/\" + jobSeekerData.id), {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          setJobPost(response.result);\n          setJobs(response.result);\n        } else throw new Error(response);\n      }).catch(function (err) {\n        console.log({\n          err: \"Login Failed\",\n          success: false\n        });\n      });\n    }\n  }, [jobSeekerData]);\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  function markStarredJob(user_id, job_post_id) {\n    console.log({\n      user_id: user_id,\n      job_post_id: job_post_id\n    });\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({\n        user_id: user_id,\n        job_post_id: job_post_id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.success) throw new Error(response);else {\n        alert(\"Job starred successfully.\");\n      }\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  function handleSelectedService(serviceMap) {\n    var selectedService = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(serviceMap.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n      if (serviceMap.get(key)) selectedService.push(key);\n    }\n\n    if (selectedService.length > 0) {\n      var _jobs = jobsData.filter(function (job) {\n        return selectedService.includes(job.job_service_id);\n      });\n\n      setJobs(_jobs);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByText(text) {\n    if (text.length >= 3) {\n      var _jobs2 = jobsData.filter(function (job) {\n        return job.job_title.includes(text);\n      });\n\n      setJobs(_jobs2);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByWager(wager) {\n    var jobs = jobsData.filter(function (job) {\n      return parseInt(job.wager_offered) >= wager;\n    });\n    setJobs(jobs);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.jobSeekerDashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, React.createElement(SearchFilterBar, {\n    handleFilterByText: handleFilterByText,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, React.createElement(JobListing, {\n    jobPost: jobPost,\n    userData: userData,\n    jobSeekerData: jobSeekerData,\n    markStarredJob: markStarredJob,\n    switchToScreen: switchToScreen,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    setEmployerRecord: setEmployerRecord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, React.createElement(BottomTabNavigator, {\n    userData: userData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), React.createElement(FilterOverlay, {\n    jobs: jobs,\n    handleFilterByText: handleFilterByText,\n    handleFilterByWager: handleFilterByWager,\n    handleSelectedService: handleSelectedService,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), React.createElement(ContactOverlay, {\n    mobile: employerRecord.phone_number,\n    email: employerRecord.email,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }), React.createElement(SettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    backgroundColor: \"#dddddd\",\n    height: 300,\n    width: width,\n    elevation: 6\n  },\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  jobSeekerDashboard: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default StarredJobs;","map":{"version":3,"sources":["D:/frontend/src/components/StarredJobs.js"],"names":["React","useState","useEffect","BottomTabNavigator","SearchFilterBar","JobListing","ContactOverlay","SettingsOverlay","FilterOverlay","AsyncStorage","_","baseUrl","Dimensions","get","width","height","StarredJobs","props","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","jobPost","setJobPost","jobs","setJobs","userData","setUserData","jobSeekerData","setJobSeekerData","employerRecord","setEmployerRecord","isEmpty","getItem","then","data","JSON","parse","user","login","error","console","log","message","id","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","success","result","Error","catch","err","switchToScreen","screen","params","navigation","navigate","markStarredJob","user_id","job_post_id","body","stringify","alert","handleSelectedService","serviceMap","selectedService","keys","key","push","length","jobsData","filter","job","includes","job_service_id","handleFilterByText","text","job_title","handleFilterByWager","wager","parseInt","wager_offered","styles","container","jobSeekerDashboard","flex","bottomNavigation","phone_number","email","StyleSheet","create","overlay","position","left","top","backgroundColor","elevation","flexDirection","shadowColor","shadowOffset","shadowOpacity","shadowRadius","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Modal,\r\n  TouchableHighlight,\r\n  Dimensions,\r\n  SafeAreaView,\r\n} from \"react-native\";\r\nimport BottomTabNavigator from \"./job_seeker/BottomTabNavigator\";\r\nimport SearchFilterBar from \"./job_seeker/SearchFilterBar\";\r\nimport JobListing from \"./job_seeker/JobListing\";\r\nimport ContactOverlay from \"./job_seeker/ContactOverlay\";\r\nimport SettingsOverlay from \"./job_seeker/SettingsOverlay\";\r\nimport FilterOverlay from \"./job_seeker/FilterOverlay\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport _ from \"lodash\";\r\nimport {baseUrl} from \"../utils/constants\";\r\n\r\n// We can use this to make the overlay fill the entire width\r\nconst {width, height} = Dimensions.get(\"window\");\r\n\r\nconst StarredJobs = (props) => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [filterVisiblity, setFilterVisibility] = useState(false);\r\n  const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n  const [jobPost, setJobPost] = useState([]);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [userData, setUserData] = useState({});\r\n  const [jobSeekerData, setJobSeekerData] = useState({});\r\n  const [employerRecord, setEmployerRecord] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (_.isEmpty(jobSeekerData)) {\r\n      try {\r\n        AsyncStorage.getItem(\"jobSeekerLoginData\").then((data) => {\r\n          const {user, login} = JSON.parse(data);\r\n          setJobSeekerData(user);\r\n        });\r\n      } catch (error) {\r\n        // Error retrieving data\r\n        console.log(error.message);\r\n      }\r\n    }\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (jobSeekerData.id) {\r\n      console.log(\r\n        baseUrl + `api/job-seeker/starred-job/list/${jobSeekerData.id}`\r\n      );\r\n      fetch(baseUrl + `api/job-seeker/starred-job/list/${jobSeekerData.id}`, {\r\n        method: \"GET\",\r\n        mode: \"cors\", // no-cors, *cors, same-origin\r\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: \"same-origin\", // include, *same-origin, omit\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: \"follow\", // manual, *follow, error\r\n        referrerPolicy: \"no-referrer\",\r\n      })\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          if (response.success) {\r\n            // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n            setJobPost(response.result);\r\n            setJobs(response.result);\r\n          } else throw new Error(response);\r\n        })\r\n        .catch((err) => {\r\n          console.log({err: \"Login Failed\", success: false});\r\n        });\r\n    }\r\n  }, [jobSeekerData]);\r\n\r\n  function switchToScreen(screen, params) {\r\n    props.navigation.navigate(screen, params);\r\n  }\r\n\r\n  function markStarredJob(user_id, job_post_id) {\r\n    console.log({user_id, job_post_id});\r\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\r\n      method: \"POST\",\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\",\r\n      body: JSON.stringify({user_id, job_post_id}),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        if (!response.success) throw new Error(response);\r\n        else {\r\n          alert(\"Job starred successfully.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  function handleSelectedService(serviceMap) {\r\n    const selectedService = [];\r\n    for (var key of serviceMap.keys()) {\r\n      if (serviceMap.get(key)) selectedService.push(key);\r\n    }\r\n    if (selectedService.length > 0) {\r\n      const jobs = jobsData.filter((job) =>\r\n        selectedService.includes(job.job_service_id)\r\n      );\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobsData);\r\n    }\r\n  }\r\n\r\n  function handleFilterByText(text) {\r\n    if (text.length >= 3) {\r\n      const jobs = jobsData.filter((job) => job.job_title.includes(text));\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobsData);\r\n    }\r\n  }\r\n\r\n  function handleFilterByWager(wager) {\r\n    const jobs = jobsData.filter((job) => parseInt(job.wager_offered) >= wager);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* {filterVisiblity ? <View style={styles.overlay}></View> : null} */}\r\n      <View style={styles.jobSeekerDashboard}>\r\n        <SearchFilterBar\r\n          handleFilterByText={handleFilterByText}\r\n          filterVisiblity={filterVisiblity}\r\n          setFilterVisibility={setFilterVisibility}\r\n        />\r\n        <SafeAreaView style={{flex: 1}}>\r\n          <JobListing\r\n            jobPost={jobPost}\r\n            userData={userData}\r\n            jobSeekerData={jobSeekerData}\r\n            markStarredJob={markStarredJob}\r\n            switchToScreen={switchToScreen}\r\n            modalVisible={modalVisible}\r\n            setModalVisible={setModalVisible}\r\n            setEmployerRecord={setEmployerRecord}\r\n          />\r\n        </SafeAreaView>\r\n      </View>\r\n      <View style={styles.bottomNavigation}>\r\n        <BottomTabNavigator\r\n          userData={userData}\r\n          setSettingModalVisible={setSettingModalVisible}\r\n          switchToScreen={switchToScreen}\r\n        />\r\n      </View>\r\n      <FilterOverlay\r\n        jobs={jobs}\r\n        handleFilterByText={handleFilterByText}\r\n        handleFilterByWager={handleFilterByWager}\r\n        handleSelectedService={handleSelectedService}\r\n        filterVisiblity={filterVisiblity}\r\n        setFilterVisibility={setFilterVisibility}\r\n      />\r\n      <ContactOverlay\r\n        mobile={employerRecord.phone_number}\r\n        email={employerRecord.email}\r\n        modalVisible={modalVisible}\r\n        setModalVisible={setModalVisible}\r\n      />\r\n      <SettingsOverlay\r\n        switchToScreen={switchToScreen}\r\n        settingModalVisible={settingModalVisible}\r\n        setSettingModalVisible={setSettingModalVisible}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  overlay: {\r\n    flex: 1,\r\n    position: \"absolute\",\r\n    left: 0,\r\n    top: 0,\r\n    backgroundColor: \"#dddddd\",\r\n    height: 300,\r\n    width,\r\n    elevation: 6,\r\n  },\r\n  container: {\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n    width: null,\r\n    height: null,\r\n  },\r\n  jobSeekerDashboard: {\r\n    flex: 9.2,\r\n  },\r\n  bottomNavigation: {\r\n    flex: 0.8,\r\n    backgroundColor: \"#dddddd\",\r\n    shadowColor: \"#dddddd\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 4.65,\r\n    elevation: 8,\r\n  },\r\n  loginText: {\r\n    color: \"black\",\r\n    fontSize: 30,\r\n    marginTop: 20,\r\n    marginLeft: 100,\r\n  },\r\n  nextBtnText: {\r\n    color: \"black\",\r\n    fontSize: 20,\r\n  },\r\n  loginBtn: {\r\n    width: \"20%\",\r\n    backgroundColor: \"#fb5b5a\",\r\n    borderRadius: 25,\r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 550,\r\n    marginBottom: 100,\r\n    marginLeft: 300,\r\n  },\r\n});\r\n\r\nexport default StarredJobs;\r\n"]},"metadata":{},"sourceType":"module"}