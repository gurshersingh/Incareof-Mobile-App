{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\StarredJobs.js\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport BottomTabNavigator from \"./job_seeker/BottomTabNavigator\";\nimport SearchFilterBar from \"./job_seeker/SearchFilterBar\";\nimport JobListing from \"./job_seeker/JobListing\";\nimport ContactOverlay from \"./job_seeker/ContactOverlay\";\nimport SettingsOverlay from \"./job_seeker/SettingsOverlay\";\nimport FilterOverlay from \"./job_seeker/FilterOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport _ from \"lodash\";\nimport { baseUrl } from \"../utils/constants\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar StarredJobs = function StarredJobs(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterVisiblity = _useState4[0],\n      setFilterVisibility = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      settingModalVisible = _useState6[0],\n      setSettingModalVisible = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      jobPost = _useState8[0],\n      setJobPost = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      userData = _useState10[0],\n      setUserData = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      jobSeekerData = _useState12[0],\n      setJobSeekerData = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      employerRecord = _useState14[0],\n      setEmployerRecord = _useState14[1];\n\n  useEffect(function () {\n    if (_.isEmpty(jobSeekerData)) {\n      try {\n        AsyncStorage.getItem(\"jobSeekerData\").then(function (job_seeker) {\n          setJobSeekerData(JSON.parse(job_seeker));\n        });\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n  }, []);\n  useEffect(function () {\n    if (jobSeekerData.id) {\n      console.log(baseUrl + (\"api/job-seeker/starred-job/list/\" + jobSeekerData.id));\n      fetch(baseUrl + (\"api/job-seeker/starred-job/list/\" + jobSeekerData.id), {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          setJobPost(response.result);\n        } else throw new Error(response);\n      }).catch(function (err) {\n        console.log({\n          err: \"Login Failed\",\n          success: false\n        });\n      });\n    }\n  }, [jobSeekerData]);\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  function markStarredJob(user_id, job_post_id) {\n    console.log({\n      user_id: user_id,\n      job_post_id: job_post_id\n    });\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({\n        user_id: user_id,\n        job_post_id: job_post_id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.success) throw new Error(response);else {\n        alert(\"Job starred successfully.\");\n      }\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.jobSeekerDashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, React.createElement(SearchFilterBar, {\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, React.createElement(JobListing, {\n    jobPost: jobPost,\n    userData: userData,\n    jobSeekerData: jobSeekerData,\n    markStarredJob: markStarredJob,\n    switchToScreen: switchToScreen,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    setEmployerRecord: setEmployerRecord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, React.createElement(BottomTabNavigator, {\n    userData: userData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  })), React.createElement(FilterOverlay, {\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), React.createElement(ContactOverlay, {\n    mobile: employerRecord.phone_number,\n    email: employerRecord.email,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), React.createElement(SettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    backgroundColor: \"#dddddd\",\n    height: 300,\n    width: width,\n    elevation: 6\n  },\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  jobSeekerDashboard: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default StarredJobs;","map":{"version":3,"sources":["D:/frontend/src/components/StarredJobs.js"],"names":["React","useState","useEffect","BottomTabNavigator","SearchFilterBar","JobListing","ContactOverlay","SettingsOverlay","FilterOverlay","AsyncStorage","_","baseUrl","Dimensions","get","width","height","StarredJobs","props","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","jobPost","setJobPost","userData","setUserData","jobSeekerData","setJobSeekerData","employerRecord","setEmployerRecord","isEmpty","getItem","then","job_seeker","JSON","parse","error","console","log","message","id","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","success","result","Error","catch","err","switchToScreen","screen","params","navigation","navigate","markStarredJob","user_id","job_post_id","body","stringify","alert","styles","container","jobSeekerDashboard","flex","bottomNavigation","phone_number","email","StyleSheet","create","overlay","position","left","top","backgroundColor","elevation","flexDirection","shadowColor","shadowOffset","shadowOpacity","shadowRadius","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    Modal,\r\n    TouchableHighlight,\r\n    Dimensions,\r\n    SafeAreaView,\r\n} from \"react-native\";\r\nimport BottomTabNavigator from \"./job_seeker/BottomTabNavigator\";\r\nimport SearchFilterBar from \"./job_seeker/SearchFilterBar\";\r\nimport JobListing from \"./job_seeker/JobListing\";\r\nimport ContactOverlay from \"./job_seeker/ContactOverlay\";\r\nimport SettingsOverlay from \"./job_seeker/SettingsOverlay\";\r\nimport FilterOverlay from \"./job_seeker/FilterOverlay\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport _ from \"lodash\";\r\nimport { baseUrl } from \"../utils/constants\";\r\n\r\n// We can use this to make the overlay fill the entire width\r\nconst { width, height } = Dimensions.get(\"window\");\r\n\r\nconst StarredJobs = (props) => {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [filterVisiblity, setFilterVisibility] = useState(false);\r\n    const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n    const [jobPost, setJobPost] = useState([]);\r\n    const [userData, setUserData] = useState({});\r\n    const [jobSeekerData, setJobSeekerData] = useState({});\r\n    const [employerRecord, setEmployerRecord] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (_.isEmpty(jobSeekerData)) {\r\n            try {\r\n                AsyncStorage.getItem(\"jobSeekerData\").then((job_seeker) => {\r\n                    setJobSeekerData(JSON.parse(job_seeker));\r\n                });\r\n            } catch (error) {\r\n                // Error retrieving data\r\n                console.log(error.message);\r\n            }\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (jobSeekerData.id) {\r\n            console.log(\r\n                baseUrl + `api/job-seeker/starred-job/list/${jobSeekerData.id}`\r\n            );\r\n            fetch(\r\n                baseUrl + `api/job-seeker/starred-job/list/${jobSeekerData.id}`,\r\n                {\r\n                    method: \"GET\",\r\n                    mode: \"cors\", // no-cors, *cors, same-origin\r\n                    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n                    credentials: \"same-origin\", // include, *same-origin, omit\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                    },\r\n                    redirect: \"follow\", // manual, *follow, error\r\n                    referrerPolicy: \"no-referrer\",\r\n                }\r\n            )\r\n                .then((response) => response.json())\r\n                .then((response) => {\r\n                    if (response.success) {\r\n                        // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n                        setJobPost(response.result);\r\n                    } else throw new Error(response);\r\n                })\r\n                .catch((err) => {\r\n                    console.log({ err: \"Login Failed\", success: false });\r\n                });\r\n        }\r\n    }, [jobSeekerData])\r\n\r\n    function switchToScreen(screen, params) {\r\n        props.navigation.navigate(screen, params);\r\n    }\r\n\r\n    function markStarredJob(user_id, job_post_id) {\r\n        console.log({ user_id, job_post_id });\r\n        fetch(baseUrl + \"api/job-seeker/star-job/add\", {\r\n            method: \"POST\",\r\n            mode: \"cors\", // no-cors, *cors, same-origin\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            body: JSON.stringify({ user_id, job_post_id }),\r\n        })\r\n            .then((response) => response.json())\r\n            .then((response) => {\r\n                if (!response.success) throw new Error(response);\r\n                else {\r\n                    alert(\"Job starred successfully.\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {/* {filterVisiblity ? <View style={styles.overlay}></View> : null} */}\r\n            <View style={styles.jobSeekerDashboard}>\r\n                <SearchFilterBar\r\n                    filterVisiblity={filterVisiblity}\r\n                    setFilterVisibility={setFilterVisibility}\r\n                />\r\n                <SafeAreaView style={{ flex: 1 }}>\r\n                    <JobListing\r\n                        jobPost={jobPost}\r\n                        userData={userData}\r\n                        jobSeekerData={jobSeekerData}\r\n                        markStarredJob={markStarredJob}\r\n                        switchToScreen={switchToScreen}\r\n                        modalVisible={modalVisible}\r\n                        setModalVisible={setModalVisible}\r\n                        setEmployerRecord={setEmployerRecord}\r\n                    />\r\n                </SafeAreaView>\r\n            </View>\r\n            <View style={styles.bottomNavigation}>\r\n                <BottomTabNavigator\r\n                    userData={userData}\r\n                    setSettingModalVisible={setSettingModalVisible}\r\n                    switchToScreen={switchToScreen}\r\n                />\r\n            </View>\r\n            <FilterOverlay\r\n                filterVisiblity={filterVisiblity}\r\n                setFilterVisibility={setFilterVisibility}\r\n            />\r\n            <ContactOverlay\r\n                mobile={employerRecord.phone_number}\r\n                email={employerRecord.email}\r\n                modalVisible={modalVisible}\r\n                setModalVisible={setModalVisible}\r\n            />\r\n            <SettingsOverlay\r\n                switchToScreen={switchToScreen}\r\n                settingModalVisible={settingModalVisible}\r\n                setSettingModalVisible={setSettingModalVisible}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    overlay: {\r\n        flex: 1,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        backgroundColor: \"#dddddd\",\r\n        height: 300,\r\n        width,\r\n        elevation: 6,\r\n    },\r\n    container: {\r\n        flexDirection: \"column\",\r\n        flex: 1,\r\n        width: null,\r\n        height: null,\r\n    },\r\n    jobSeekerDashboard: {\r\n        flex: 9.2,\r\n    },\r\n    bottomNavigation: {\r\n        flex: 0.8,\r\n        backgroundColor: \"#dddddd\",\r\n        shadowColor: \"#dddddd\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 4,\r\n        },\r\n        shadowOpacity: 0.3,\r\n        shadowRadius: 4.65,\r\n        elevation: 8,\r\n    },\r\n    loginText: {\r\n        color: \"black\",\r\n        fontSize: 30,\r\n        marginTop: 20,\r\n        marginLeft: 100,\r\n    },\r\n    nextBtnText: {\r\n        color: \"black\",\r\n        fontSize: 20,\r\n    },\r\n    loginBtn: {\r\n        width: \"20%\",\r\n        backgroundColor: \"#fb5b5a\",\r\n        borderRadius: 25,\r\n        height: 50,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginTop: 550,\r\n        marginBottom: 100,\r\n        marginLeft: 300,\r\n    },\r\n});\r\n\r\nexport default StarredJobs;\r\n"]},"metadata":{},"sourceType":"module"}