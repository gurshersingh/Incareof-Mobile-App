{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\job_seeker\\\\JobSeekerScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport SearchFilterBar from \"./SearchFilterBar\";\nimport JobListing from \"./JobListing\";\nimport ContactOverlay from \"./ContactOverlay\";\nimport SettingsOverlay from \"./SettingsOverlay\";\nimport FilterOverlay from \"./FilterOverlay\";\nimport { baseUrl } from \"../../utils/constants\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar JobSeekerScreen = function JobSeekerScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      routeName = _useState2[0],\n      setRouteName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filterVisiblity = _useState6[0],\n      setFilterVisibility = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      settingModalVisible = _useState8[0],\n      setSettingModalVisible = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      jobPost = _useState10[0],\n      setJobPost = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userData = _useState12[0],\n      setUserData = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      jobSeekerData = _useState14[0],\n      setJobSeekerData = _useState14[1];\n\n  var _useState15 = useState({}),\n      _useState16 = _slicedToArray(_useState15, 2),\n      employerRecord = _useState16[0],\n      setEmployerRecord = _useState16[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    setRouteName(props.navigation.state.routeName);\n    setUserData(props.navigation.state.params);\n    fetch(baseUrl + \"api/job-post/list\", {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.success) {\n        setJobPost(response.result);\n      } else throw new Error(response);\n    }).catch(function (err) {\n      console.log({\n        err: \"No job post found\",\n        success: false\n      });\n    });\n  }, []);\n  useEffect(function () {\n    if (userData.id) {\n      var api_url = baseUrl + (\"api/job-seeker/profile/\" + userData.id);\n      fetch(api_url, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          setJobSeekerData(response.result);\n\n          try {\n            AsyncStorage.setItem(\"jobSeekerData\", JSON.stringify(response.result));\n            AsyncStorage.setItem(\"userData\", JSON.stringify(userData));\n          } catch (error) {\n            console.log(error.message);\n          }\n        } else {\n          throw new Error(response);\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, [userData]);\n\n  function markStarredJob(user_id, job_post_id) {\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({\n        user_id: user_id,\n        job_post_id: job_post_id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.success) throw new Error(response);else {\n        alert(\"Job starred successfully.\");\n      }\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  function filterJobPost(searchText) {\n    console.log({\n      searchText: searchText,\n      jobPost: jobPost\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.jobSeekerDashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, React.createElement(SearchFilterBar, {\n    filterJobPost: filterJobPost,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, React.createElement(JobListing, {\n    jobPost: jobPost,\n    userData: userData,\n    jobSeekerData: jobSeekerData,\n    markStarredJob: markStarredJob,\n    switchToScreen: switchToScreen,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    setEmployerRecord: setEmployerRecord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, React.createElement(BottomTabNavigator, {\n    userData: userData,\n    routeName: routeName,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  })), React.createElement(FilterOverlay, {\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), React.createElement(ContactOverlay, {\n    mobile: employerRecord.phone_number,\n    email: employerRecord.email,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }), React.createElement(SettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }));\n};\n\nJobSeekerScreen[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Jobs\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    backgroundColor: \"#dddddd\",\n    height: 300,\n    width: width,\n    elevation: 6\n  },\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  jobSeekerDashboard: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default JobSeekerScreen;","map":{"version":3,"sources":["D:/frontend/src/components/job_seeker/JobSeekerScreen.js"],"names":["React","useState","useEffect","BottomTabNavigator","SearchFilterBar","JobListing","ContactOverlay","SettingsOverlay","FilterOverlay","baseUrl","AsyncStorage","Dimensions","get","width","height","JobSeekerScreen","props","routeName","setRouteName","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","jobPost","setJobPost","userData","setUserData","jobSeekerData","setJobSeekerData","employerRecord","setEmployerRecord","switchToScreen","screen","params","navigation","navigate","state","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","json","success","result","Error","catch","err","console","log","id","api_url","setItem","JSON","stringify","error","message","markStarredJob","user_id","job_post_id","body","alert","filterJobPost","searchText","styles","container","jobSeekerDashboard","flex","bottomNavigation","phone_number","email","screenProps","title","StyleSheet","create","overlay","position","left","top","backgroundColor","elevation","flexDirection","shadowColor","shadowOffset","shadowOpacity","shadowRadius","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    Modal,\r\n    TouchableHighlight,\r\n    Dimensions,\r\n    SafeAreaView,\r\n} from \"react-native\";\r\nimport BottomTabNavigator from \"./BottomTabNavigator\";\r\nimport SearchFilterBar from \"./SearchFilterBar\";\r\nimport JobListing from \"./JobListing\";\r\nimport ContactOverlay from \"./ContactOverlay\";\r\nimport SettingsOverlay from \"./SettingsOverlay\";\r\nimport FilterOverlay from \"./FilterOverlay\";\r\nimport { baseUrl } from \"../../utils/constants\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\n\r\n// We can use this to make the overlay fill the entire width\r\nconst { width, height } = Dimensions.get(\"window\");\r\n\r\nconst JobSeekerScreen = (props) => {\r\n    const [routeName, setRouteName] = useState(null);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [filterVisiblity, setFilterVisibility] = useState(false);\r\n    const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n    const [jobPost, setJobPost] = useState([]);\r\n    const [userData, setUserData] = useState({});\r\n    const [jobSeekerData, setJobSeekerData] = useState({});\r\n    const [employerRecord, setEmployerRecord] = useState({});\r\n\r\n    function switchToScreen(screen, params) {\r\n        props.navigation.navigate(screen, params);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRouteName(props.navigation.state.routeName);\r\n        setUserData(props.navigation.state.params);\r\n        fetch(baseUrl + \"api/job-post/list\", {\r\n            method: \"GET\",\r\n            mode: \"cors\", // no-cors, *cors, same-origin\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n        })\r\n            .then((response) => response.json())\r\n            .then((response) => {\r\n                if (response.success) {\r\n                    // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n                    setJobPost(response.result);\r\n                } else throw new Error(response);\r\n            })\r\n            .catch((err) => {\r\n                console.log({ err: \"No job post found\", success: false });\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userData.id) {\r\n            const api_url = baseUrl + `api/job-seeker/profile/${userData.id}`;\r\n            fetch(api_url, {\r\n                method: \"GET\",\r\n                mode: \"cors\", // no-cors, *cors, same-origin\r\n                cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: \"same-origin\", // include, *same-origin, omit\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                redirect: \"follow\", // manual, *follow, error\r\n                referrerPolicy: \"no-referrer\",\r\n            })\r\n                .then((response) => response.json())\r\n                .then((response) => {\r\n                    if (response.success) {\r\n                        // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n                        setJobSeekerData(response.result);\r\n                        try {\r\n                            AsyncStorage.setItem(\r\n                                \"jobSeekerData\",\r\n                                JSON.stringify(response.result)\r\n                            );\r\n                            AsyncStorage.setItem(\r\n                                \"userData\",\r\n                                JSON.stringify(userData)\r\n                            );\r\n                        } catch (error) {\r\n                            // Error retrieving data\r\n                            console.log(error.message);\r\n                        }\r\n                    } else {\r\n                        throw new Error(response);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }, [userData]);\r\n\r\n    function markStarredJob(user_id, job_post_id) {\r\n        fetch(baseUrl + \"api/job-seeker/star-job/add\", {\r\n            method: \"POST\",\r\n            mode: \"cors\", // no-cors, *cors, same-origin\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            body: JSON.stringify({ user_id, job_post_id }),\r\n        })\r\n            .then((response) => response.json())\r\n            .then((response) => {\r\n                if (!response.success) throw new Error(response);\r\n                else {\r\n                    alert(\"Job starred successfully.\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    function filterJobPost(searchText) {\r\n        console.log({ searchText, jobPost });\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {/* {filterVisiblity ? <View style={styles.overlay}></View> : null} */}\r\n            <View style={styles.jobSeekerDashboard}>\r\n                <SearchFilterBar\r\n                    filterJobPost={filterJobPost}\r\n                    filterVisiblity={filterVisiblity}\r\n                    setFilterVisibility={setFilterVisibility}\r\n                />\r\n                <SafeAreaView style={{ flex: 1 }}>\r\n                    <JobListing\r\n                        jobPost={jobPost}\r\n                        userData={userData}\r\n                        jobSeekerData={jobSeekerData}\r\n                        markStarredJob={markStarredJob}\r\n                        switchToScreen={switchToScreen}\r\n                        modalVisible={modalVisible}\r\n                        setModalVisible={setModalVisible}\r\n                        setEmployerRecord={setEmployerRecord}\r\n                    />\r\n                </SafeAreaView>\r\n            </View>\r\n            <View style={styles.bottomNavigation}>\r\n                <BottomTabNavigator\r\n                    userData={userData}\r\n                    routeName={routeName}\r\n                    setSettingModalVisible={setSettingModalVisible}\r\n                    switchToScreen={switchToScreen}\r\n                />\r\n            </View>\r\n            <FilterOverlay\r\n                filterVisiblity={filterVisiblity}\r\n                setFilterVisibility={setFilterVisibility}\r\n            />\r\n            <ContactOverlay\r\n                mobile={employerRecord.phone_number}\r\n                email={employerRecord.email}\r\n                modalVisible={modalVisible}\r\n                setModalVisible={setModalVisible}\r\n            />\r\n            <SettingsOverlay\r\n                switchToScreen={switchToScreen}\r\n                settingModalVisible={settingModalVisible}\r\n                setSettingModalVisible={setSettingModalVisible}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nJobSeekerScreen[\"navigationOptions\"] = (screenProps) => ({\r\n    title: \"Jobs\",\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n    overlay: {\r\n        flex: 1,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        backgroundColor: \"#dddddd\",\r\n        height: 300,\r\n        width,\r\n        elevation: 6,\r\n    },\r\n    container: {\r\n        flexDirection: \"column\",\r\n        flex: 1,\r\n        width: null,\r\n        height: null,\r\n    },\r\n    jobSeekerDashboard: {\r\n        flex: 9.2,\r\n    },\r\n    bottomNavigation: {\r\n        flex: 0.8,\r\n        backgroundColor: \"#dddddd\",\r\n        shadowColor: \"#dddddd\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 4,\r\n        },\r\n        shadowOpacity: 0.3,\r\n        shadowRadius: 4.65,\r\n        elevation: 8,\r\n    },\r\n    loginText: {\r\n        color: \"black\",\r\n        fontSize: 30,\r\n        marginTop: 20,\r\n        marginLeft: 100,\r\n    },\r\n    nextBtnText: {\r\n        color: \"black\",\r\n        fontSize: 20,\r\n    },\r\n    loginBtn: {\r\n        width: \"20%\",\r\n        backgroundColor: \"#fb5b5a\",\r\n        borderRadius: 25,\r\n        height: 50,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginTop: 550,\r\n        marginBottom: 100,\r\n        marginLeft: 300,\r\n    },\r\n});\r\n\r\nexport default JobSeekerScreen;\r\n"]},"metadata":{},"sourceType":"module"}