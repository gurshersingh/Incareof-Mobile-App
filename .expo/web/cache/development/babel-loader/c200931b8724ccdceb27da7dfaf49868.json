{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\employer\\\\EmployerScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Toast from \"react-native-root-toast\";\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\nimport UserContactOverlay from \"./UserContactOverlay\";\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { baseUrl } from \"../../utils/constants\";\nimport JobCard from \"./JobCard\";\n\nvar EmployerScreen = function EmployerScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterVisiblity = _useState4[0],\n      setFilterVisibility = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      settingModalVisible = _useState6[0],\n      setSettingModalVisible = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loginData = _useState8[0],\n      setLoginData = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      employerData = _useState10[0],\n      setEmployerData = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      success = _useState12[0],\n      setSuccess = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      jobsData = _useState14[0],\n      setJobsData = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      jobs = _useState16[0],\n      setJobs = _useState16[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    try {\n      AsyncStorage.getItem(\"employerLoginData\").then(function (data) {\n        var _JSON$parse = JSON.parse(data),\n            login = _JSON$parse.login,\n            user = _JSON$parse.user;\n\n        setLoginData(login);\n        setEmployerData(user);\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }, []);\n  useEffect(function () {\n    if (employerData.id) {\n      var api_url = baseUrl + (\"api/employer/job-applicants/\" + employerData.id);\n      fetch(api_url, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          setJobsData(response.result);\n          setJobs(response.result);\n        } else {\n          throw new Error(response);\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n\n    return function () {};\n  }, [employerData]);\n\n  function handleSelectedService(serviceMap) {\n    var selectedService = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(serviceMap.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n      if (serviceMap.get(key)) selectedService.push(key);\n    }\n\n    if (selectedService.length > 0) {\n      var _jobs = jobsData.filter(function (job) {\n        return selectedService.includes(job.job_service_id);\n      });\n\n      setJobs(_jobs);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByText(text) {\n    if (text.length >= 3) {\n      var _jobs2 = jobsData.filter(function (job) {\n        return job.job_title.includes(text);\n      });\n\n      setJobs(_jobs2);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByWager(wager) {\n    var jobs = jobsData.filter(function (job) {\n      return parseInt(job.wager_offered) >= wager;\n    });\n    setJobs(jobs);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.innerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, React.createElement(EmployerSearchFilter, {\n    handleFilterByText: handleFilterByText,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, jobs.length > 0 ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: false,\n    data: jobs,\n    keyExtractor: function keyExtractor(job) {\n      return job.id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(JobCard, {\n        job: item,\n        setModalVisible: setModalVisible,\n        switchToScreen: switchToScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }) : React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"Job Post not found.\")))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, React.createElement(EmployerBottomNavigator, {\n    employerLoginData: loginData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  })), React.createElement(Toast, {\n    visible: success !== null && !success,\n    duration: Toast.durations.SHORT,\n    position: Toast.positions.BOTTOM,\n    backgroundColor: \"red\",\n    shadowColor: \"#dddddd\",\n    shadow: true,\n    animation: false,\n    hideOnPress: true,\n    onHidden: function onHidden() {\n      return setSuccess(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, \"Something went wrong.\"), React.createElement(EmployerFilterOverlay, {\n    jobs: jobs,\n    handleFilterByText: handleFilterByText,\n    handleFilterByWager: handleFilterByWager,\n    handleSelectedService: handleSelectedService,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }), React.createElement(UserContactOverlay, {\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), React.createElement(EmployerSettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }));\n};\n\nEmployerScreen[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Posted Jobs\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  innerContainer: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default EmployerScreen;","map":{"version":3,"sources":["D:/frontend/src/components/employer/EmployerScreen.js"],"names":["React","useState","useEffect","Toast","EmployerSearchFilter","EmployerBottomNavigator","EmployerFilterOverlay","UserContactOverlay","EmployerSettingsOverlay","AsyncStorage","baseUrl","JobCard","EmployerScreen","props","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","loginData","setLoginData","employerData","setEmployerData","success","setSuccess","jobsData","setJobsData","jobs","setJobs","switchToScreen","screen","params","navigation","navigate","getItem","then","data","JSON","parse","login","user","error","console","log","message","id","api_url","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","result","Error","catch","err","handleSelectedService","serviceMap","selectedService","keys","key","get","push","length","filter","job","includes","job_service_id","handleFilterByText","text","job_title","handleFilterByWager","wager","parseInt","wager_offered","styles","container","innerContainer","flex","toString","item","textAlign","bottomNavigation","durations","SHORT","positions","BOTTOM","screenProps","title","StyleSheet","create","flexDirection","width","height","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, SafeAreaView, FlatList } from \"react-native\";\r\nimport Toast from \"react-native-root-toast\";\r\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\r\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\r\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\r\nimport UserContactOverlay from \"./UserContactOverlay\";\r\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { baseUrl } from \"../../utils/constants\";\r\nimport JobCard from \"./JobCard\";\r\n\r\nconst EmployerScreen = (props) => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [filterVisiblity, setFilterVisibility] = useState(false);\r\n  const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n  const [loginData, setLoginData] = useState({});\r\n  const [employerData, setEmployerData] = useState({});\r\n  const [success, setSuccess] = useState(null);\r\n  const [jobsData, setJobsData] = useState([]);\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  function switchToScreen(screen, params) {\r\n    props.navigation.navigate(screen, params);\r\n  }\r\n\r\n  useEffect(() => {\r\n    try {\r\n      AsyncStorage.getItem(\"employerLoginData\").then((data) => {\r\n        const { login, user } = JSON.parse(data);\r\n        setLoginData(login);\r\n        setEmployerData(user);\r\n      });\r\n    } catch (error) {\r\n      // Error retrieving data\r\n      console.log(error.message);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (employerData.id) {\r\n      const api_url =\r\n        baseUrl + `api/employer/job-applicants/${employerData.id}`;\r\n      fetch(api_url, {\r\n        method: \"GET\",\r\n        mode: \"cors\", // no-cors, *cors, same-origin\r\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: \"same-origin\", // include, *same-origin, omit\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: \"follow\", // manual, *follow, error\r\n        referrerPolicy: \"no-referrer\",\r\n      })\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          if (response.success) {\r\n            // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n            setJobsData(response.result);\r\n            setJobs(response.result);\r\n          } else {\r\n            throw new Error(response);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    return () => { };\r\n  }, [employerData]);\r\n\r\n  function handleSelectedService(serviceMap) {\r\n    const selectedService = [];\r\n    for (var key of serviceMap.keys()) {\r\n      if (serviceMap.get(key)) selectedService.push(key);\r\n    }\r\n    if (selectedService.length > 0) {\r\n      const jobs = jobsData.filter((job) =>\r\n        selectedService.includes(job.job_service_id)\r\n      );\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobsData);\r\n    }\r\n  }\r\n\r\n  function handleFilterByText(text) {\r\n    if (text.length >= 3) {\r\n      const jobs = jobsData.filter((job) => job.job_title.includes(text));\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobsData);\r\n    }\r\n  }\r\n\r\n  function handleFilterByWager(wager) {\r\n    const jobs = jobsData.filter((job) => parseInt(job.wager_offered) >= wager);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.innerContainer}>\r\n        <EmployerSearchFilter\r\n          handleFilterByText={handleFilterByText}\r\n          filterVisiblity={filterVisiblity}\r\n          setFilterVisibility={setFilterVisibility}\r\n        />\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n          {jobs.length > 0 ? (\r\n            <FlatList\r\n              showsVerticalScrollIndicator={false}\r\n              data={jobs}\r\n              keyExtractor={(job) => job.id.toString()}\r\n              renderItem={({ item }) => {\r\n                return (\r\n                  <JobCard\r\n                    job={item}\r\n                    setModalVisible={setModalVisible}\r\n                    switchToScreen={switchToScreen}\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n          ) : (\r\n              <View style={styles.container}>\r\n                <Text style={{ textAlign: \"center\" }}>Job Post not found.</Text>\r\n              </View>\r\n            )}\r\n        </SafeAreaView>\r\n      </View>\r\n      <View style={styles.bottomNavigation}>\r\n        <EmployerBottomNavigator\r\n          employerLoginData={loginData}\r\n          setSettingModalVisible={setSettingModalVisible}\r\n          switchToScreen={switchToScreen}\r\n        />\r\n      </View>\r\n      <Toast\r\n        visible={success !== null && !success}\r\n        duration={Toast.durations.SHORT}\r\n        position={Toast.positions.BOTTOM}\r\n        backgroundColor=\"red\"\r\n        shadowColor=\"#dddddd\"\r\n        shadow={true}\r\n        animation={false}\r\n        hideOnPress={true}\r\n        onHidden={() => setSuccess(null)}\r\n      >\r\n        Something went wrong.\r\n      </Toast>\r\n      <EmployerFilterOverlay\r\n        jobs={jobs}\r\n        handleFilterByText={handleFilterByText}\r\n        handleFilterByWager={handleFilterByWager}\r\n        handleSelectedService={handleSelectedService}\r\n        filterVisiblity={filterVisiblity}\r\n        setFilterVisibility={setFilterVisibility}\r\n      />\r\n      <UserContactOverlay\r\n        modalVisible={modalVisible}\r\n        setModalVisible={setModalVisible}\r\n      />\r\n      <EmployerSettingsOverlay\r\n        switchToScreen={switchToScreen}\r\n        settingModalVisible={settingModalVisible}\r\n        setSettingModalVisible={setSettingModalVisible}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nEmployerScreen[\"navigationOptions\"] = (screenProps) => ({\r\n  title: \"Posted Jobs\",\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n    width: null,\r\n    height: null,\r\n  },\r\n  innerContainer: {\r\n    flex: 9.2,\r\n  },\r\n  bottomNavigation: {\r\n    flex: 0.8,\r\n    backgroundColor: \"#dddddd\",\r\n    shadowColor: \"#dddddd\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 4.65,\r\n    elevation: 8,\r\n  },\r\n  loginText: {\r\n    color: \"black\",\r\n    fontSize: 30,\r\n    marginTop: 20,\r\n    marginLeft: 100,\r\n  },\r\n  nextBtnText: {\r\n    color: \"black\",\r\n    fontSize: 20,\r\n  },\r\n  loginBtn: {\r\n    width: \"20%\",\r\n    backgroundColor: \"#fb5b5a\",\r\n    borderRadius: 25,\r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 550,\r\n    marginBottom: 100,\r\n    marginLeft: 300,\r\n  },\r\n});\r\n\r\nexport default EmployerScreen;\r\n"]},"metadata":{},"sourceType":"module"}