{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\job_seeker\\\\JobSeekerScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport SearchFilterBar from \"./SearchFilterBar\";\nimport JobListing from \"./JobListing\";\nimport ContactOverlay from \"./ContactOverlay\";\nimport SettingsOverlay from \"./SettingsOverlay\";\nimport FilterOverlay from \"./FilterOverlay\";\nimport { baseUrl } from \"../../utils/constants\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar JobSeekerScreen = function JobSeekerScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      routeName = _useState2[0],\n      setRouteName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filterVisiblity = _useState6[0],\n      setFilterVisibility = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      settingModalVisible = _useState8[0],\n      setSettingModalVisible = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      jobPosts = _useState10[0],\n      setJobPosts = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      jobs = _useState12[0],\n      setJobs = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userData = _useState14[0],\n      setUserData = _useState14[1];\n\n  var _useState15 = useState({}),\n      _useState16 = _slicedToArray(_useState15, 2),\n      employerRecord = _useState16[0],\n      setEmployerRecord = _useState16[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    setRouteName(props.navigation.state.routeName);\n    var _props$navigation$sta = props.navigation.state.params,\n        login = _props$navigation$sta.login,\n        user = _props$navigation$sta.user;\n    setUserData(login);\n    fetch(baseUrl + \"api/job-post/list\", {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.success) {\n        setJobPosts(response.result);\n        setJobs(response.result);\n      } else throw new Error(response);\n    }).catch(function (err) {\n      console.log({\n        err: \"No job post found\",\n        success: false\n      });\n    });\n  }, []);\n\n  function markStarredJob(user_id, job_post_id) {\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({\n        user_id: user_id,\n        job_post_id: job_post_id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.success) throw new Error(response);else {\n        alert(\"Job starred successfully.\");\n      }\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  function handleSelectedService(serviceMap) {\n    var selectedService = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(serviceMap.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n      if (serviceMap.get(key)) selectedService.push(key);\n    }\n\n    if (selectedService.length > 0) {\n      var _jobs = jobPosts.filter(function (job) {\n        return selectedService.includes(job.job_service_id);\n      });\n\n      setJobs(_jobs);\n    } else {\n      setJobs(jobPosts);\n    }\n  }\n\n  function handleFilterByText(text) {\n    if (text.length >= 3) {\n      var _jobs2 = jobPosts.filter(function (job) {\n        return job.job_title.includes(text);\n      });\n\n      setJobs(_jobs2);\n    } else {\n      setJobs(jobPosts);\n    }\n  }\n\n  function handleFilterByWager(wager) {\n    var jobs = jobPosts.filter(function (job) {\n      return parseInt(job.wager_offered) >= wager;\n    });\n    setJobs(jobs);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.jobSeekerDashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, React.createElement(SearchFilterBar, {\n    handleFilterByText: handleFilterByText,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, React.createElement(JobListing, {\n    jobPost: jobs,\n    userData: userData,\n    markStarredJob: markStarredJob,\n    switchToScreen: switchToScreen,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    setEmployerRecord: setEmployerRecord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, React.createElement(BottomTabNavigator, {\n    userData: userData,\n    routeName: routeName,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  })), React.createElement(FilterOverlay, {\n    jobs: jobs,\n    handleFilterByText: handleFilterByText,\n    handleFilterByWager: handleFilterByWager,\n    handleSelectedService: handleSelectedService,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), React.createElement(ContactOverlay, {\n    mobile: employerRecord.phone_number,\n    email: employerRecord.email,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), React.createElement(SettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }));\n};\n\nJobSeekerScreen[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Jobs\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    backgroundColor: \"#dddddd\",\n    height: 300,\n    width: width,\n    elevation: 6\n  },\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  jobSeekerDashboard: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default JobSeekerScreen;","map":{"version":3,"sources":["D:/frontend/src/components/job_seeker/JobSeekerScreen.js"],"names":["React","useState","useEffect","BottomTabNavigator","SearchFilterBar","JobListing","ContactOverlay","SettingsOverlay","FilterOverlay","baseUrl","AsyncStorage","Dimensions","get","width","height","JobSeekerScreen","props","routeName","setRouteName","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","jobPosts","setJobPosts","jobs","setJobs","userData","setUserData","employerRecord","setEmployerRecord","switchToScreen","screen","params","navigation","navigate","state","login","user","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","json","success","result","Error","catch","err","console","log","markStarredJob","user_id","job_post_id","body","JSON","stringify","alert","handleSelectedService","serviceMap","selectedService","keys","key","push","length","filter","job","includes","job_service_id","handleFilterByText","text","job_title","handleFilterByWager","wager","parseInt","wager_offered","styles","container","jobSeekerDashboard","flex","bottomNavigation","phone_number","email","screenProps","title","StyleSheet","create","overlay","position","left","top","backgroundColor","elevation","flexDirection","shadowColor","shadowOffset","shadowOpacity","shadowRadius","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  Modal,\r\n  TouchableHighlight,\r\n  Dimensions,\r\n  SafeAreaView,\r\n} from \"react-native\";\r\nimport BottomTabNavigator from \"./BottomTabNavigator\";\r\nimport SearchFilterBar from \"./SearchFilterBar\";\r\nimport JobListing from \"./JobListing\";\r\nimport ContactOverlay from \"./ContactOverlay\";\r\nimport SettingsOverlay from \"./SettingsOverlay\";\r\nimport FilterOverlay from \"./FilterOverlay\";\r\nimport {baseUrl} from \"../../utils/constants\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\n\r\n// We can use this to make the overlay fill the entire width\r\nconst {width, height} = Dimensions.get(\"window\");\r\n\r\nconst JobSeekerScreen = (props) => {\r\n  const [routeName, setRouteName] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [filterVisiblity, setFilterVisibility] = useState(false);\r\n  const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n  const [jobPosts, setJobPosts] = useState([]);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [userData, setUserData] = useState({});\r\n  const [employerRecord, setEmployerRecord] = useState({});\r\n\r\n  function switchToScreen(screen, params) {\r\n    props.navigation.navigate(screen, params);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setRouteName(props.navigation.state.routeName);\r\n    const {login, user} = props.navigation.state.params;\r\n    setUserData(login);\r\n    fetch(baseUrl + \"api/job-post/list\", {\r\n      method: \"GET\",\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        if (response.success) {\r\n          // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n          //   console.log(\"jobs ========> \", response.result);\r\n          setJobPosts(response.result);\r\n          setJobs(response.result);\r\n        } else throw new Error(response);\r\n      })\r\n      .catch((err) => {\r\n        console.log({err: \"No job post found\", success: false});\r\n      });\r\n  }, []);\r\n\r\n  function markStarredJob(user_id, job_post_id) {\r\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\r\n      method: \"POST\",\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\",\r\n      body: JSON.stringify({user_id, job_post_id}),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        if (!response.success) throw new Error(response);\r\n        else {\r\n          alert(\"Job starred successfully.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  function handleSelectedService(serviceMap) {\r\n    const selectedService = [];\r\n    for (var key of serviceMap.keys()) {\r\n      if (serviceMap.get(key)) selectedService.push(key);\r\n    }\r\n    if (selectedService.length > 0) {\r\n      const jobs = jobPosts.filter((job) =>\r\n        selectedService.includes(job.job_service_id)\r\n      );\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobPosts);\r\n    }\r\n  }\r\n\r\n  function handleFilterByText(text) {\r\n    if (text.length >= 3) {\r\n      const jobs = jobPosts.filter((job) => job.job_title.includes(text));\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobPosts);\r\n    }\r\n  }\r\n\r\n  function handleFilterByWager(wager) {\r\n    const jobs = jobPosts.filter((job) => parseInt(job.wager_offered) >= wager);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.jobSeekerDashboard}>\r\n        <SearchFilterBar\r\n          handleFilterByText={handleFilterByText}\r\n          filterVisiblity={filterVisiblity}\r\n          setFilterVisibility={setFilterVisibility}\r\n        />\r\n        <SafeAreaView style={{flex: 1}}>\r\n          <JobListing\r\n            jobPost={jobs}\r\n            userData={userData}\r\n            markStarredJob={markStarredJob}\r\n            switchToScreen={switchToScreen}\r\n            modalVisible={modalVisible}\r\n            setModalVisible={setModalVisible}\r\n            setEmployerRecord={setEmployerRecord}\r\n          />\r\n        </SafeAreaView>\r\n      </View>\r\n      <View style={styles.bottomNavigation}>\r\n        <BottomTabNavigator\r\n          userData={userData}\r\n          routeName={routeName}\r\n          setSettingModalVisible={setSettingModalVisible}\r\n          switchToScreen={switchToScreen}\r\n        />\r\n      </View>\r\n      <FilterOverlay\r\n        jobs={jobs}\r\n        handleFilterByText={handleFilterByText}\r\n        handleFilterByWager={handleFilterByWager}\r\n        handleSelectedService={handleSelectedService}\r\n        filterVisiblity={filterVisiblity}\r\n        setFilterVisibility={setFilterVisibility}\r\n      />\r\n      <ContactOverlay\r\n        mobile={employerRecord.phone_number}\r\n        email={employerRecord.email}\r\n        modalVisible={modalVisible}\r\n        setModalVisible={setModalVisible}\r\n      />\r\n      <SettingsOverlay\r\n        switchToScreen={switchToScreen}\r\n        settingModalVisible={settingModalVisible}\r\n        setSettingModalVisible={setSettingModalVisible}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nJobSeekerScreen[\"navigationOptions\"] = (screenProps) => ({\r\n  title: \"Jobs\",\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  overlay: {\r\n    flex: 1,\r\n    position: \"absolute\",\r\n    left: 0,\r\n    top: 0,\r\n    backgroundColor: \"#dddddd\",\r\n    height: 300,\r\n    width,\r\n    elevation: 6,\r\n  },\r\n  container: {\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n    width: null,\r\n    height: null,\r\n  },\r\n  jobSeekerDashboard: {\r\n    flex: 9.2,\r\n  },\r\n  bottomNavigation: {\r\n    flex: 0.8,\r\n    backgroundColor: \"#dddddd\",\r\n    shadowColor: \"#dddddd\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 4.65,\r\n    elevation: 8,\r\n  },\r\n  loginText: {\r\n    color: \"black\",\r\n    fontSize: 30,\r\n    marginTop: 20,\r\n    marginLeft: 100,\r\n  },\r\n  nextBtnText: {\r\n    color: \"black\",\r\n    fontSize: 20,\r\n  },\r\n  loginBtn: {\r\n    width: \"20%\",\r\n    backgroundColor: \"#fb5b5a\",\r\n    borderRadius: 25,\r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 550,\r\n    marginBottom: 100,\r\n    marginLeft: 300,\r\n  },\r\n});\r\n\r\nexport default JobSeekerScreen;\r\n"]},"metadata":{},"sourceType":"module"}