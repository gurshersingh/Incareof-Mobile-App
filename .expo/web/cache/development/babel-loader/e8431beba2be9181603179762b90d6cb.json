{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rahulsharma/Desktop/Project/frontend/src/components/job_seeker/JobSeekerScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport SearchFilterBar from \"./SearchFilterBar\";\nimport JobListing from \"./JobListing\";\nimport ContactOverlay from \"./ContactOverlay\";\nimport SettingsOverlay from \"./SettingsOverlay\";\nimport FilterOverlay from \"./FilterOverlay\";\nimport { baseUrl } from \"../../utils/constants\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar JobSeekerScreen = function JobSeekerScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      routeName = _useState2[0],\n      setRouteName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filterVisiblity = _useState6[0],\n      setFilterVisibility = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      settingModalVisible = _useState8[0],\n      setSettingModalVisible = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      jobPosts = _useState10[0],\n      setJobPosts = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      jobs = _useState12[0],\n      setJobs = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userData = _useState14[0],\n      setUserData = _useState14[1];\n\n  var _useState15 = useState({}),\n      _useState16 = _slicedToArray(_useState15, 2),\n      employerRecord = _useState16[0],\n      setEmployerRecord = _useState16[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    setRouteName(props.navigation.state.routeName);\n    var _props$navigation$sta = props.navigation.state.params,\n        login = _props$navigation$sta.login,\n        user = _props$navigation$sta.user;\n    setUserData(login);\n    fetch(baseUrl + \"api/job-post/list\", {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.success) {\n        setJobPosts(response.result);\n        setJobs(response.result);\n      } else throw new Error(response);\n    }).catch(function (err) {\n      console.log({\n        err: \"No job post found\",\n        success: false\n      });\n    });\n  }, []);\n\n  function markStarredJob(user_id, job_post_id) {\n    fetch(baseUrl + \"api/job-seeker/star-job/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify({\n        user_id: user_id,\n        job_post_id: job_post_id\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.success) throw new Error(response);else {\n        alert(\"Job starred successfully.\");\n      }\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }\n\n  function handleSelectedService(serviceMap) {\n    var selectedService = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(serviceMap.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n      if (serviceMap.get(key)) selectedService.push(key);\n    }\n\n    if (selectedService.length > 0) {\n      var _jobs = jobPosts.filter(function (job) {\n        return selectedService.includes(job.job_service_id);\n      });\n\n      setJobs(_jobs);\n    } else {\n      setJobs(jobPosts);\n    }\n  }\n\n  function handleFilterByText(text) {\n    if (text.length >= 3) {\n      var _jobs2 = jobPosts.filter(function (job) {\n        return job.job_title.includes(text);\n      });\n\n      setJobs(_jobs2);\n    } else {\n      setJobs(jobPosts);\n    }\n  }\n\n  function handleFilterByWager(wager) {\n    var jobs = jobPosts.filter(function (job) {\n      return parseInt(job.wager_offered) >= wager;\n    });\n    setJobs(jobs);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.jobSeekerDashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, React.createElement(SearchFilterBar, {\n    handleFilterByText: handleFilterByText,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, React.createElement(JobListing, {\n    jobPost: jobs,\n    userData: userData,\n    markStarredJob: markStarredJob,\n    switchToScreen: switchToScreen,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    setEmployerRecord: setEmployerRecord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, React.createElement(BottomTabNavigator, {\n    userData: userData,\n    routeName: routeName,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  })), React.createElement(FilterOverlay, {\n    jobs: jobs,\n    handleFilterByText: handleFilterByText,\n    handleFilterByWager: handleFilterByWager,\n    handleSelectedService: handleSelectedService,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), React.createElement(ContactOverlay, {\n    mobile: employerRecord.phone_number,\n    email: employerRecord.email,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), React.createElement(SettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }));\n};\n\nJobSeekerScreen[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Jobs\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    backgroundColor: \"#dddddd\",\n    height: 300,\n    width: width,\n    elevation: 6\n  },\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  jobSeekerDashboard: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default JobSeekerScreen;","map":{"version":3,"sources":["/Users/rahulsharma/Desktop/Project/frontend/src/components/job_seeker/JobSeekerScreen.js"],"names":["React","useState","useEffect","BottomTabNavigator","SearchFilterBar","JobListing","ContactOverlay","SettingsOverlay","FilterOverlay","baseUrl","AsyncStorage","Dimensions","get","width","height","JobSeekerScreen","props","routeName","setRouteName","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","jobPosts","setJobPosts","jobs","setJobs","userData","setUserData","employerRecord","setEmployerRecord","switchToScreen","screen","params","navigation","navigate","state","login","user","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","json","success","result","Error","catch","err","console","log","markStarredJob","user_id","job_post_id","body","JSON","stringify","alert","handleSelectedService","serviceMap","selectedService","keys","key","push","length","filter","job","includes","job_service_id","handleFilterByText","text","job_title","handleFilterByWager","wager","parseInt","wager_offered","styles","container","jobSeekerDashboard","flex","bottomNavigation","phone_number","email","screenProps","title","StyleSheet","create","overlay","position","left","top","backgroundColor","elevation","flexDirection","shadowColor","shadowOffset","shadowOpacity","shadowRadius","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {\n    StyleSheet,\n    Text,\n    View,\n    Modal,\n    TouchableHighlight,\n    Dimensions,\n    SafeAreaView,\n} from \"react-native\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport SearchFilterBar from \"./SearchFilterBar\";\nimport JobListing from \"./JobListing\";\nimport ContactOverlay from \"./ContactOverlay\";\nimport SettingsOverlay from \"./SettingsOverlay\";\nimport FilterOverlay from \"./FilterOverlay\";\nimport {baseUrl} from \"../../utils/constants\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\n// We can use this to make the overlay fill the entire width\nconst {width, height} = Dimensions.get(\"window\");\n\nconst JobSeekerScreen = (props) => {\n    const [routeName, setRouteName] = useState(null);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [filterVisiblity, setFilterVisibility] = useState(false);\n    const [settingModalVisible, setSettingModalVisible] = useState(false);\n    const [jobPosts, setJobPosts] = useState([]);\n    const [jobs, setJobs] = useState([]);\n    const [userData, setUserData] = useState({});\n    const [employerRecord, setEmployerRecord] = useState({});\n\n    function switchToScreen(screen, params) {\n        props.navigation.navigate(screen, params);\n    }\n\n    useEffect(() => {\n        setRouteName(props.navigation.state.routeName);\n        const {login, user} = props.navigation.state.params;\n        setUserData(login);\n        fetch(baseUrl + \"api/job-post/list\", {\n            method: \"GET\",\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\", // include, *same-origin, omit\n            headers: {\n                \"Content-Type\": \"application/json\",\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: \"follow\", // manual, *follow, error\n            referrerPolicy: \"no-referrer\",\n        })\n            .then((response) => response.json())\n            .then((response) => {\n                if (response.success) {\n                    // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\n                    //   console.log(\"jobs ========> \", response.result);\n                    setJobPosts(response.result);\n                    setJobs(response.result);\n                } else throw new Error(response);\n            })\n            .catch((err) => {\n                console.log({err: \"No job post found\", success: false});\n            });\n    }, []);\n\n    function markStarredJob(user_id, job_post_id) {\n        fetch(baseUrl + \"api/job-seeker/star-job/add\", {\n            method: \"POST\",\n            mode: \"cors\", // no-cors, *cors, same-origin\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: \"same-origin\", // include, *same-origin, omit\n            headers: {\n                \"Content-Type\": \"application/json\",\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: \"follow\", // manual, *follow, error\n            referrerPolicy: \"no-referrer\",\n            body: JSON.stringify({user_id, job_post_id}),\n        })\n            .then((response) => response.json())\n            .then((response) => {\n                if (!response.success) throw new Error(response);\n                else {\n                    alert(\"Job starred successfully.\");\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    function handleSelectedService(serviceMap) {\n        const selectedService = [];\n        for (var key of serviceMap.keys()) {\n            if (serviceMap.get(key)) selectedService.push(key);\n        }\n        if (selectedService.length > 0) {\n            const jobs = jobPosts.filter((job) =>\n                selectedService.includes(job.job_service_id)\n            );\n            setJobs(jobs);\n        } else {\n            setJobs(jobPosts);\n        }\n    }\n\n    function handleFilterByText(text) {\n        if (text.length >= 3) {\n            const jobs = jobPosts.filter((job) => job.job_title.includes(text));\n            setJobs(jobs);\n        } else {\n            setJobs(jobPosts);\n        }\n    }\n\n    function handleFilterByWager(wager) {\n        const jobs = jobPosts.filter(\n            (job) => parseInt(job.wager_offered) >= wager\n        );\n        setJobs(jobs);\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.jobSeekerDashboard}>\n                <SearchFilterBar\n                    handleFilterByText={handleFilterByText}\n                    filterVisiblity={filterVisiblity}\n                    setFilterVisibility={setFilterVisibility}\n                />\n                <SafeAreaView style={{flex: 1}}>\n                    <JobListing\n                        jobPost={jobs}\n                        userData={userData}\n                        markStarredJob={markStarredJob}\n                        switchToScreen={switchToScreen}\n                        modalVisible={modalVisible}\n                        setModalVisible={setModalVisible}\n                        setEmployerRecord={setEmployerRecord}\n                    />\n                </SafeAreaView>\n            </View>\n            <View style={styles.bottomNavigation}>\n                <BottomTabNavigator\n                    userData={userData}\n                    routeName={routeName}\n                    setSettingModalVisible={setSettingModalVisible}\n                    switchToScreen={switchToScreen}\n                />\n            </View>\n            <FilterOverlay\n                jobs={jobs}\n                handleFilterByText={handleFilterByText}\n                handleFilterByWager={handleFilterByWager}\n                handleSelectedService={handleSelectedService}\n                filterVisiblity={filterVisiblity}\n                setFilterVisibility={setFilterVisibility}\n            />\n            <ContactOverlay\n                mobile={employerRecord.phone_number}\n                email={employerRecord.email}\n                modalVisible={modalVisible}\n                setModalVisible={setModalVisible}\n            />\n            <SettingsOverlay\n                switchToScreen={switchToScreen}\n                settingModalVisible={settingModalVisible}\n                setSettingModalVisible={setSettingModalVisible}\n            />\n        </View>\n    );\n};\n\nJobSeekerScreen[\"navigationOptions\"] = (screenProps) => ({\n    title: \"Jobs\",\n});\n\nconst styles = StyleSheet.create({\n    overlay: {\n        flex: 1,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        backgroundColor: \"#dddddd\",\n        height: 300,\n        width,\n        elevation: 6,\n    },\n    container: {\n        flexDirection: \"column\",\n        flex: 1,\n        width: null,\n        height: null,\n    },\n    jobSeekerDashboard: {\n        flex: 9.2,\n    },\n    bottomNavigation: {\n        flex: 0.8,\n        backgroundColor: \"#dddddd\",\n        shadowColor: \"#dddddd\",\n        shadowOffset: {\n            width: 0,\n            height: 4,\n        },\n        shadowOpacity: 0.3,\n        shadowRadius: 4.65,\n        elevation: 8,\n    },\n    loginText: {\n        color: \"black\",\n        fontSize: 30,\n        marginTop: 20,\n        marginLeft: 100,\n    },\n    nextBtnText: {\n        color: \"black\",\n        fontSize: 20,\n    },\n    loginBtn: {\n        width: \"20%\",\n        backgroundColor: \"#fb5b5a\",\n        borderRadius: 25,\n        height: 50,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: 550,\n        marginBottom: 100,\n        marginLeft: 300,\n    },\n});\n\nexport default JobSeekerScreen;\n"]},"metadata":{},"sourceType":"module"}