{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\employer\\\\ApplicantList.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Toast from \"react-native-root-toast\";\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\nimport UserContactOverlay from \"./UserContactOverlay\";\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport UserCard from \"./UserCard\";\n\nvar ApplicantList = function ApplicantList(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterVisiblity = _useState4[0],\n      setFilterVisibility = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      settingModalVisible = _useState6[0],\n      setSettingModalVisible = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      employerLoginData = _useState8[0],\n      setEmployerLoginData = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      success = _useState10[0],\n      setSuccess = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      applicants = _useState12[0],\n      setApplicants = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userRecord = _useState14[0],\n      setUserRecord = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      jobsData = _useState16[0],\n      setJobsData = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      jobs = _useState18[0],\n      setJobs = _useState18[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    setApplicants(props.navigation.state.params);\n    return function () {};\n  }, []);\n\n  function handleSelectedService(serviceMap) {\n    var selectedService = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(serviceMap.keys()), _step; !(_step = _iterator()).done;) {\n      var key = _step.value;\n      if (serviceMap.get(key)) selectedService.push(key);\n    }\n\n    if (selectedService.length > 0) {\n      var _jobs = jobsData.filter(function (job) {\n        return selectedService.includes(job.job_service_id);\n      });\n\n      setJobs(_jobs);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByText(text) {\n    if (text.length >= 3) {\n      var _jobs2 = jobsData.filter(function (job) {\n        return job.job_title.includes(text);\n      });\n\n      setJobs(_jobs2);\n    } else {\n      setJobs(jobsData);\n    }\n  }\n\n  function handleFilterByWager(wager) {\n    var jobs = jobsData.filter(function (job) {\n      return parseInt(job.wager_offered) >= wager;\n    });\n    setJobs(jobs);\n  }\n\n  var phone_number = userRecord.phone_number;\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.innerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, React.createElement(EmployerSearchFilter, {\n    handleFilterByText: handleFilterByText,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, applicants.length > 0 ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: false,\n    data: applicants,\n    keyExtractor: function keyExtractor(applicant) {\n      return applicant.id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(UserCard, {\n        applicant: item,\n        setModalVisible: setModalVisible,\n        switchToScreen: switchToScreen,\n        setUserRecord: setUserRecord,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }) : React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"No applicant.\")))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, React.createElement(EmployerBottomNavigator, {\n    employerLoginData: employerLoginData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  })), React.createElement(Toast, {\n    visible: success !== null && !success,\n    duration: Toast.durations.SHORT,\n    position: Toast.positions.BOTTOM,\n    backgroundColor: \"red\",\n    shadowColor: \"#dddddd\",\n    shadow: true,\n    animation: false,\n    hideOnPress: true,\n    onHidden: function onHidden() {\n      return setSuccess(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Something went wrong.\"), React.createElement(EmployerFilterOverlay, {\n    jobs: jobs,\n    handleFilterByText: handleFilterByText,\n    handleFilterByWager: handleFilterByWager,\n    handleSelectedService: handleSelectedService,\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), React.createElement(UserContactOverlay, {\n    mobile: phone_number,\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), React.createElement(EmployerSettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n};\n\nApplicantList[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Applicants\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  innerContainer: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default ApplicantList;","map":{"version":3,"sources":["D:/frontend/src/components/employer/ApplicantList.js"],"names":["React","useState","useEffect","Toast","EmployerSearchFilter","EmployerBottomNavigator","EmployerFilterOverlay","UserContactOverlay","EmployerSettingsOverlay","AsyncStorage","UserCard","ApplicantList","props","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","employerLoginData","setEmployerLoginData","success","setSuccess","applicants","setApplicants","userRecord","setUserRecord","jobsData","setJobsData","jobs","setJobs","switchToScreen","screen","params","navigation","navigate","state","handleSelectedService","serviceMap","selectedService","keys","key","get","push","length","filter","job","includes","job_service_id","handleFilterByText","text","job_title","handleFilterByWager","wager","parseInt","wager_offered","phone_number","styles","container","innerContainer","flex","applicant","id","toString","item","bottomNavigation","durations","SHORT","positions","BOTTOM","screenProps","title","StyleSheet","create","flexDirection","width","height","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {StyleSheet, Text, View, SafeAreaView, FlatList} from \"react-native\";\r\nimport Toast from \"react-native-root-toast\";\r\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\r\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\r\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\r\nimport UserContactOverlay from \"./UserContactOverlay\";\r\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport UserCard from \"./UserCard\";\r\n\r\nconst ApplicantList = (props) => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [filterVisiblity, setFilterVisibility] = useState(false);\r\n  const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n  const [employerLoginData, setEmployerLoginData] = useState({});\r\n  const [success, setSuccess] = useState(null);\r\n  const [applicants, setApplicants] = useState([]);\r\n  const [userRecord, setUserRecord] = useState({});\r\n  const [jobsData, setJobsData] = useState([]);\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  function switchToScreen(screen, params) {\r\n    props.navigation.navigate(screen, params);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setApplicants(props.navigation.state.params);\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  function handleSelectedService(serviceMap) {\r\n    const selectedService = [];\r\n    for (var key of serviceMap.keys()) {\r\n      if (serviceMap.get(key)) selectedService.push(key);\r\n    }\r\n    if (selectedService.length > 0) {\r\n      const jobs = jobsData.filter((job) =>\r\n        selectedService.includes(job.job_service_id)\r\n      );\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobsData);\r\n    }\r\n  }\r\n\r\n  function handleFilterByText(text) {\r\n    if (text.length >= 3) {\r\n      const jobs = jobsData.filter((job) => job.job_title.includes(text));\r\n      setJobs(jobs);\r\n    } else {\r\n      setJobs(jobsData);\r\n    }\r\n  }\r\n\r\n  function handleFilterByWager(wager) {\r\n    const jobs = jobsData.filter((job) => parseInt(job.wager_offered) >= wager);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  const {phone_number} = userRecord;\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.innerContainer}>\r\n        <EmployerSearchFilter\r\n          handleFilterByText={handleFilterByText}\r\n          filterVisiblity={filterVisiblity}\r\n          setFilterVisibility={setFilterVisibility}\r\n        />\r\n        <SafeAreaView style={{flex: 1}}>\r\n          {applicants.length > 0 ? (\r\n            <FlatList\r\n              showsVerticalScrollIndicator={false}\r\n              data={applicants}\r\n              keyExtractor={(applicant) => applicant.id.toString()}\r\n              renderItem={({item}) => {\r\n                return (\r\n                  <UserCard\r\n                    applicant={item}\r\n                    setModalVisible={setModalVisible}\r\n                    switchToScreen={switchToScreen}\r\n                    setUserRecord={setUserRecord}\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n          ) : (\r\n            <View style={styles.container}>\r\n              <Text>No applicant.</Text>\r\n            </View>\r\n          )}\r\n        </SafeAreaView>\r\n      </View>\r\n      <View style={styles.bottomNavigation}>\r\n        <EmployerBottomNavigator\r\n          employerLoginData={employerLoginData}\r\n          setSettingModalVisible={setSettingModalVisible}\r\n          switchToScreen={switchToScreen}\r\n        />\r\n      </View>\r\n      <Toast\r\n        visible={success !== null && !success}\r\n        duration={Toast.durations.SHORT}\r\n        position={Toast.positions.BOTTOM}\r\n        backgroundColor=\"red\"\r\n        shadowColor=\"#dddddd\"\r\n        shadow={true}\r\n        animation={false}\r\n        hideOnPress={true}\r\n        onHidden={() => setSuccess(null)}\r\n      >\r\n        Something went wrong.\r\n      </Toast>\r\n      <EmployerFilterOverlay\r\n        jobs={jobs}\r\n        handleFilterByText={handleFilterByText}\r\n        handleFilterByWager={handleFilterByWager}\r\n        handleSelectedService={handleSelectedService}\r\n        filterVisiblity={filterVisiblity}\r\n        setFilterVisibility={setFilterVisibility}\r\n      />\r\n      <UserContactOverlay\r\n        mobile={phone_number}\r\n        modalVisible={modalVisible}\r\n        setModalVisible={setModalVisible}\r\n      />\r\n      <EmployerSettingsOverlay\r\n        switchToScreen={switchToScreen}\r\n        settingModalVisible={settingModalVisible}\r\n        setSettingModalVisible={setSettingModalVisible}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nApplicantList[\"navigationOptions\"] = (screenProps) => ({\r\n  title: \"Applicants\",\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"column\",\r\n    flex: 1,\r\n    width: null,\r\n    height: null,\r\n  },\r\n  innerContainer: {\r\n    flex: 9.2,\r\n  },\r\n  bottomNavigation: {\r\n    flex: 0.8,\r\n    backgroundColor: \"#dddddd\",\r\n    shadowColor: \"#dddddd\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 4,\r\n    },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 4.65,\r\n    elevation: 8,\r\n  },\r\n  loginText: {\r\n    color: \"black\",\r\n    fontSize: 30,\r\n    marginTop: 20,\r\n    marginLeft: 100,\r\n  },\r\n  nextBtnText: {\r\n    color: \"black\",\r\n    fontSize: 20,\r\n  },\r\n  loginBtn: {\r\n    width: \"20%\",\r\n    backgroundColor: \"#fb5b5a\",\r\n    borderRadius: 25,\r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 550,\r\n    marginBottom: 100,\r\n    marginLeft: 300,\r\n  },\r\n});\r\n\r\nexport default ApplicantList;\r\n"]},"metadata":{},"sourceType":"module"}