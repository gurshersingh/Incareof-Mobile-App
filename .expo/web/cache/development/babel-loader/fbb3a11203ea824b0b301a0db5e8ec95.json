{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\frontend\\\\src\\\\components\\\\employer\\\\EmployerScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Toast from \"react-native-root-toast\";\nimport EmployerSearchFilter from \"./EmployerSearchFilter\";\nimport EmployerBottomNavigator from \"./EmployerBottomNavigator\";\nimport EmployerFilterOverlay from \"./EmployerFilterOverlay\";\nimport UserContactOverlay from \"./UserContactOverlay\";\nimport EmployerSettingsOverlay from \"./EmployerSettingsOverlay\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { baseUrl } from \"../../utils/constants\";\nimport JobCard from \"./JobCard\";\n\nvar EmployerScreen = function EmployerScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterVisiblity = _useState4[0],\n      setFilterVisibility = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      settingModalVisible = _useState6[0],\n      setSettingModalVisible = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      employerLoginData = _useState8[0],\n      setEmployerLoginData = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      success = _useState10[0],\n      setSuccess = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      jobsData = _useState12[0],\n      setJobsData = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userData = _useState14[0],\n      setUserData = _useState14[1];\n\n  function switchToScreen(screen, params) {\n    props.navigation.navigate(screen, params);\n  }\n\n  useEffect(function () {\n    try {\n      AsyncStorage.getItem(\"employerLoginData\").then(function (employer) {\n        setEmployerLoginData(JSON.parse(employer));\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }, []);\n  console.log(\"employer loging data ====================> \", jobsData);\n  useEffect(function () {\n    if (employerLoginData.id) {\n      var api_url = baseUrl + (\"api/employer/job-applicants/\" + employerLoginData.id);\n      fetch(api_url, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        if (response.success) {\n          setJobsData(response.result);\n        } else {\n          throw new Error(response);\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n\n    return function () {};\n  }, [employerLoginData]);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.innerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, React.createElement(EmployerSearchFilter, {\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, jobsData.length > 0 ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: false,\n    data: jobsData,\n    keyExtractor: function keyExtractor(job) {\n      return job.id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(JobCard, {\n        job: item,\n        setModalVisible: setModalVisible,\n        switchToScreen: switchToScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 41\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }) : React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 37\n    }\n  }, \"Job Post not found.\")))), React.createElement(View, {\n    style: styles.bottomNavigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, React.createElement(EmployerBottomNavigator, {\n    employerLoginData: employerLoginData,\n    setSettingModalVisible: setSettingModalVisible,\n    switchToScreen: switchToScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  })), React.createElement(Toast, {\n    visible: success !== null && !success,\n    duration: Toast.durations.SHORT,\n    position: Toast.positions.BOTTOM,\n    backgroundColor: \"red\",\n    shadowColor: \"#dddddd\",\n    shadow: true,\n    animation: false,\n    hideOnPress: true,\n    onHidden: function onHidden() {\n      return setSuccess(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Something went wrong.\"), React.createElement(EmployerFilterOverlay, {\n    filterVisiblity: filterVisiblity,\n    setFilterVisibility: setFilterVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), React.createElement(UserContactOverlay, {\n    modalVisible: modalVisible,\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), React.createElement(EmployerSettingsOverlay, {\n    switchToScreen: switchToScreen,\n    settingModalVisible: settingModalVisible,\n    setSettingModalVisible: setSettingModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }));\n};\n\nEmployerScreen[\"navigationOptions\"] = function (screenProps) {\n  return {\n    title: \"Posted Jobs\"\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    width: null,\n    height: null\n  },\n  innerContainer: {\n    flex: 9.2\n  },\n  bottomNavigation: {\n    flex: 0.8,\n    backgroundColor: \"#dddddd\",\n    shadowColor: \"#dddddd\",\n    shadowOffset: {\n      width: 0,\n      height: 4\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 8\n  },\n  loginText: {\n    color: \"black\",\n    fontSize: 30,\n    marginTop: 20,\n    marginLeft: 100\n  },\n  nextBtnText: {\n    color: \"black\",\n    fontSize: 20\n  },\n  loginBtn: {\n    width: \"20%\",\n    backgroundColor: \"#fb5b5a\",\n    borderRadius: 25,\n    height: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 550,\n    marginBottom: 100,\n    marginLeft: 300\n  }\n});\nexport default EmployerScreen;","map":{"version":3,"sources":["D:/frontend/src/components/employer/EmployerScreen.js"],"names":["React","useState","useEffect","Toast","EmployerSearchFilter","EmployerBottomNavigator","EmployerFilterOverlay","UserContactOverlay","EmployerSettingsOverlay","AsyncStorage","baseUrl","JobCard","EmployerScreen","props","modalVisible","setModalVisible","filterVisiblity","setFilterVisibility","settingModalVisible","setSettingModalVisible","employerLoginData","setEmployerLoginData","success","setSuccess","jobsData","setJobsData","userData","setUserData","switchToScreen","screen","params","navigation","navigate","getItem","then","employer","JSON","parse","error","console","log","message","id","api_url","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","response","json","result","Error","catch","err","styles","container","innerContainer","flex","length","job","toString","item","bottomNavigation","durations","SHORT","positions","BOTTOM","screenProps","title","StyleSheet","create","flexDirection","width","height","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","loginText","color","fontSize","marginTop","marginLeft","nextBtnText","loginBtn","borderRadius","alignItems","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, SafeAreaView, FlatList } from 'react-native';\r\nimport Toast from \"react-native-root-toast\";\r\nimport EmployerSearchFilter from './EmployerSearchFilter';\r\nimport EmployerBottomNavigator from './EmployerBottomNavigator';\r\nimport EmployerFilterOverlay from './EmployerFilterOverlay';\r\nimport UserContactOverlay from './UserContactOverlay';\r\nimport EmployerSettingsOverlay from './EmployerSettingsOverlay';\r\nimport AsyncStorage from \"@react-native-community/async-storage\";\r\nimport { baseUrl } from '../../utils/constants';\r\nimport JobCard from \"./JobCard\";\r\n\r\nconst EmployerScreen = (props) => {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [filterVisiblity, setFilterVisibility] = useState(false);\r\n    const [settingModalVisible, setSettingModalVisible] = useState(false);\r\n    const [employerLoginData, setEmployerLoginData] = useState({});\r\n    const [success, setSuccess] = useState(null);\r\n    const [jobsData, setJobsData] = useState([]);\r\n    const [userData, setUserData] = useState({});\r\n\r\n    function switchToScreen(screen, params) {\r\n        props.navigation.navigate(screen, params);\r\n    }\r\n\r\n    useEffect(() => {\r\n        try {\r\n            AsyncStorage.getItem(\"employerLoginData\").then((employer) => {\r\n                setEmployerLoginData(JSON.parse(employer));\r\n            });\r\n        } catch (error) {\r\n            // Error retrieving data\r\n            console.log(error.message);\r\n        }\r\n    }, [])\r\n\r\n    console.log(\"employer loging data ====================> \", jobsData);\r\n\r\n    useEffect(() => {\r\n        if (employerLoginData.id) {\r\n            const api_url = baseUrl + `api/employer/job-applicants/${employerLoginData.id}`;\r\n            fetch(api_url, {\r\n                method: \"GET\",\r\n                mode: \"cors\", // no-cors, *cors, same-origin\r\n                cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: \"same-origin\", // include, *same-origin, omit\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                redirect: \"follow\", // manual, *follow, error\r\n                referrerPolicy: \"no-referrer\",\r\n            })\r\n                .then((response) => response.json())\r\n                .then((response) => {\r\n                    if (response.success) {\r\n                        // this.props.navigation.navigate('Login', {user_type:response.result.user_type})\r\n                        setJobsData(response.result);\r\n                    } else {\r\n                        throw new Error(response);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n\r\n        return () => { };\r\n    }, [employerLoginData])\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.innerContainer}>\r\n                <EmployerSearchFilter\r\n                    filterVisiblity={filterVisiblity}\r\n                    setFilterVisibility={setFilterVisibility}\r\n                />\r\n                <SafeAreaView style={{ flex: 1 }}>\r\n                    {\r\n                        jobsData.length > 0 ? (\r\n                            <FlatList\r\n                                showsVerticalScrollIndicator={false}\r\n                                data={jobsData}\r\n                                keyExtractor={(job) => job.id.toString()}\r\n                                renderItem={({ item }) => {\r\n                                    return (\r\n                                        <JobCard\r\n                                            job={item}\r\n                                            setModalVisible={setModalVisible}\r\n                                            switchToScreen={switchToScreen} />\r\n                                    );\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                                <View style={styles.container}>\r\n                                    <Text>Job Post not found.</Text>\r\n                                </View>\r\n                            )\r\n                    }\r\n                </SafeAreaView>\r\n            </View>\r\n            <View style={styles.bottomNavigation}>\r\n                <EmployerBottomNavigator\r\n                    employerLoginData={employerLoginData}\r\n                    setSettingModalVisible={setSettingModalVisible}\r\n                    switchToScreen={switchToScreen}\r\n                />\r\n            </View>\r\n            <Toast\r\n                visible={success !== null && !success}\r\n                duration={Toast.durations.SHORT}\r\n                position={Toast.positions.BOTTOM}\r\n                backgroundColor=\"red\"\r\n                shadowColor=\"#dddddd\"\r\n                shadow={true}\r\n                animation={false}\r\n                hideOnPress={true}\r\n                onHidden={() => setSuccess(null)}\r\n            >\r\n                Something went wrong.\r\n            </Toast>\r\n            <EmployerFilterOverlay\r\n                filterVisiblity={filterVisiblity}\r\n                setFilterVisibility={setFilterVisibility}\r\n            />\r\n            <UserContactOverlay\r\n                modalVisible={modalVisible}\r\n                setModalVisible={setModalVisible}\r\n            />\r\n            <EmployerSettingsOverlay\r\n                switchToScreen={switchToScreen}\r\n                settingModalVisible={settingModalVisible}\r\n                setSettingModalVisible={setSettingModalVisible}\r\n            />\r\n        </View>\r\n    )\r\n}\r\n\r\nEmployerScreen[\"navigationOptions\"] = (screenProps) => ({\r\n    title: \"Posted Jobs\",\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"column\",\r\n        flex: 1,\r\n        width: null,\r\n        height: null,\r\n    },\r\n    innerContainer: {\r\n        flex: 9.2,\r\n    },\r\n    bottomNavigation: {\r\n        flex: 0.8,\r\n        backgroundColor: \"#dddddd\",\r\n        shadowColor: \"#dddddd\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 4,\r\n        },\r\n        shadowOpacity: 0.3,\r\n        shadowRadius: 4.65,\r\n        elevation: 8,\r\n    },\r\n    loginText: {\r\n        color: \"black\",\r\n        fontSize: 30,\r\n        marginTop: 20,\r\n        marginLeft: 100,\r\n    },\r\n    nextBtnText: {\r\n        color: \"black\",\r\n        fontSize: 20,\r\n    },\r\n    loginBtn: {\r\n        width: \"20%\",\r\n        backgroundColor: \"#fb5b5a\",\r\n        borderRadius: 25,\r\n        height: 50,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginTop: 550,\r\n        marginBottom: 100,\r\n        marginLeft: 300,\r\n    },\r\n});\r\n\r\nexport default EmployerScreen;\r\n"]},"metadata":{},"sourceType":"module"}